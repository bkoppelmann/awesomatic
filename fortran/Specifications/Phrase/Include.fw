@O@<Include.specs@>==@{
$/Adt/Stack.gnrc +instance=SrcFile +referto=SrcFile :inst
$/Input/CoordMap.gnrc :inst
@}

@O@<Include.h@>==@{
#ifndef INCLUDE_H
#define INCLUDE_H

#include "eliproto.h"
#include "source.h"

typedef struct stkelt {
  SrcBufPtr buffer;	/* Suspended buffer */
  CONST char *name;	/* Suspended break table file name */
  int line;		/* Next line in suspended file */
} SrcFile;

extern int ReadingFrom ELI_ARG((char *name));
/* Suspend input and switch to a new file
 *   On entry-
 *     name is the desired file
 *     SrcBuffer describes the current file
 *     TEXTSTART points to the first unexamined character
 *     LineNum indexes the line containing the first unexamined character
 *   If the desired file can be opened then on exit-
 *     ReadingFrom=1
 *     The description of the current file has been saved
 *     SrcBuffer describes the desired file
 *     TEXTSTART points to the first unexamined character
 *     LineNum indexes the line containing the first unexamined character
 *   Else on exit-
 *     ReadingFrom=0
 *     SrcBuffer, TEXTSTART and LineNum remain unchanged
 ***/

extern char *ContinuationText ELI_ARG((void));
/* Return to the last suspended input file
 *   If suspended input exists then on exit-
 *     SrcBuffer describes the suspended input
 *     TEXTSTART points to the first unexamined character
 *     LineNum indexes the line containing the first unexamined character
 *   Else on exit-
 *     SrcBuffer remains unchanged
 ***/

#endif
@}

@O@<Include.c@>==@{
#include <stdio.h>
#include <fcntl.h>

#include "err.h"
#include "SrcFileStack.h"
#include "CoordMap.h"
#include "Include.h"

int
#ifdef PROTO_OK
ReadingFrom(char *name)
#else
ReadingFrom(name) char *name;
#endif
{ int f;
  SrcFile temp;

  if ((f = open(name, O_RDONLY)) < 0) return 0;

  temp.buffer = SrcBuffer;
  temp.name = MapFile(LineNum);
  temp.line = MapLine(LineNum);
  SrcFileStackPush(temp);

  initBuf(name, f);
  AddBreak(name, 1);

  return 1;
}

char *
#ifdef PROTO_OK
ContinuationText(void)
#else
ContinuationText()
#endif
{ SrcFile temp;

  if (!SrcFileStackEmpty) {
    do {
      (void)close(finlBuf());
      temp = SrcFileStackPop;
      SrcBuffer = temp.buffer;
      AddBreak(temp.name, temp.line);
      if (!*TEXTSTART) refillBuf(TEXTSTART);
    } while (!SrcFileStackEmpty && !*TEXTSTART);
  }
  return TEXTSTART;
}
@}

@$@<Mapping Attribution@>==@{
/* This file is responsible for processing the $MAP portion of the	*/
/* input.  This entails creating symbolic equivalence classes by	*/
/* setting the 'Map' property for concrete symbol keys and the 'AbsMap' */
/* property for abstract symbol keys.  The 'Map' property is the single	*/
/* abstract symbol to which the concrete symbol matches and the 'AbsMap'*/
/* property is a List of keys which represent each of the concrete	*/
/* symbols which are equivalent to the abstract symbol in question.	*/
/* The 'Match' and 'AbsMatch' property are also set for those		*/
/* productions which are explicitly mapped by the user.			*/

ATTR GotSymMap: VOID;
ATTR GotRuleMap: VOID;
ATTR GotMapQChains: VOID;
ATTR GotEqClass: VOID;
ATTR DefTableKeyElem: DefTableKey;

SYMBOL Source COMPUTE
  /* Guarantees that the Map and AbsMap properties are set appropriately*/
  /* for all symbol keys.						*/
  SYNT.GotSymMap = CONSTITUENTS (MapMember.GotSymMap, MapSymbol.GotSymMap);

  /* Guarantees that the Match and AbsMatch property are set for	*/
  /* productions which are explicitly mapped by the user.		*/
  SYNT.GotRuleMap = CONSTITUENTS MapRule.GotRuleMap;

  SYNT.GotMapQChains = CONSTITUENTS MapChains.GotMapQChains;
END;

/* Build up a list of the symbols in an equivalence class specification */
/* Don't include the equivalence class symbol in the list and don't	*/
/* put duplicates in the list.						*/
ATTR KeyList: DefTableKeyList;
CHAIN symset: DefTableKeyList;
CHAIN symsetdone: VOID;

SYMBOL Source COMPUTE
  CHAINSTART HEAD.symsetdone = 0;
END;

SYMBOL MapSymbol COMPUTE
  SYNT.KeyList = TAIL.symset;
  CHAINSTART HEAD.symset = GetAbsMap(THIS.Key, NULLDefTableKeyList)
                             DEPENDS_ON THIS.symsetdone;
  THIS.symsetdone = THIS.GotSymMap;
END;

RULE: MapMember ::= Identifier COMPUTE
  MapMember.symset = IF(NE(MapMember.Key, INCLUDING MapSymbol.Key),
			AddToSetDefTableKeyList(MapMember.Key,
                                                MapMember.symset,
						DefTableKeyCmp),
			MapMember.symset);

  /* It is an error if the symbol doesn't exist in the grammar */
  IF(EQ(MapMember.Key, NoKey),
    message(FATAL, "No such symbol", 0, COORDREF),
    IF(GetIsAbs(MapMember.Key, 0),
      message(FATAL,
"Abstract syntax symbols may not appear on the rhs of an equivalence class",
              0, COORDREF),
      VOIDEN(0)))
  DEPENDS_ON INCLUDING Source.GotOccur;

  /* Set whether this equivalence class is a set of terminals or	*/
  /* nonterminals.  Set the EqClass property to T_ERROR if an attempt	*/
  /* is made to have it be both.					*/
  MapMember.GotEqClass = IF(EQ(MapMember.Key, NoKey), 0,
		IsEqClass(INCLUDING MapSymbol.Key,
                              GetNonTerm(MapMember.Key, 0),
			      T_ERROR))
			DEPENDS_ON INCLUDING Source.GotKind;

  .Key = GetMap(MapMember.Key, NoKey);
  MapMember.GotSymMap =
    IF(AND(NE(.Key, NoKey), NE(.Key, INCLUDING MapSymbol.Key)),
      message(ERROR,
              "Symbol cannot be member of more than one equivalence class",
              0, COORDREF),
      ResetMap(MapMember.Key, INCLUDING MapSymbol.Key))
                          DEPENDS_ON MapMember.GotEqClass;
END;

RULE: MapSymbol ::=  MaptoId '::=' MapMembers '.' COMPUTE
  MapSymbol.Key = KResetStr(MaptoId.Key, MaptoId.Sym);

  /* Print an error if an attempt is made to have terms and nonterms in	*/
  /* the same equivalence class.					*/
  ORDER(
    IF(GetIsCon(MapSymbol.Key, 0),
      IsEqClass(MapSymbol.Key, GetNonTerm(MapSymbol.Key, 0), T_ERROR)),
    IF(EQ(GetEqClass(MapSymbol.Key, 0), T_ERROR),
      message(FATAL,
        "Equivalence classes cannot have both terminals and nonterminals",
        0, COORDREF),
      IF(AND(AND(GetIsAbs(MapSymbol.Key, 0), GetNonTerm(MapSymbol.Key, 0)),
           EQ(GetEqClass(MapSymbol.Key, 0), T_TERM)),
        message(FATAL,
          "Abstract nonterminal equivalenced to concrete terminals",
          0, COORDREF))))
    DEPENDS_ON (INCLUDING Source.GotOccur, INCLUDING Source.GotSymMap,
		INCLUDING Source.GotKind);

  /* Set the AbsMap property for the equivalence class symbol */
  MapSymbol.GotSymMap = ResetAbsMap(MapSymbol.Key, MapSymbol.KeyList);
END;

ATTR Key:     DefTableKey;

RULE: MapAbs ::= COMPUTE
  MapAbs.Key=NoKey;
END;

RULE: MapAbs ::= ':' RuleIdUse COMPUTE
  MapAbs.Key=RuleIdUse.Key;
END;

ATTR ntcount: int;

RULE: MapRule ::= MapProd MapReorder MapAbs '.' COMPUTE
  /* ConMatch has to be done here, so that coordinate information is	*/
  /* reported correctly.  We must set a property here to avoid trying	*/
  /* to match this concrete rule again later.				*/
  MapRule.GotRuleMap =
    IF(NE(MapProd.Key, NoKey),
      ORDER(
        ResetMappedRHS(MapProd.Key, MapReorder.SymbolPList),
	ResetOrder(MapProd.Key, MapReorder.olist),
	ResetNTCount(
	  MapProd.Key,
	  MapReorder CONSTITUENTS MapPosition.Sym
	    WITH(int, ADD, ARGTOONE, ZERO)),
	ResetArgCount(
	  MapProd.Key,
	  MapReorder CONSTITUENTS (MapPosition.Sym, MapText.Sym)
	    WITH(int, ADD, ARGTOONE, ZERO)),
	ConMatch(
	  MapProd.Key,
	  CreateSignature(MapReorder.SymbolPList),
	  MapAbs.Key,
	  COORDREF)))
    DEPENDS_ON (
      INCLUDING Source.GotRule,
      INCLUDING Source.GotOper,
      INCLUDING Source.GotSymMap,
      MapRule.ntcount);

  /* Issue an error message if the above call to ConMatch didn't result in */
  /* a match.								   */
  IF(AND(EQ(GetMatch(MapProd.Key, NoKey), NoKey),
         NE(MapProd.Key, NoKey)),
     message(FATAL, "Couldn't determine a mapping.", 0, COORDREF))
	DEPENDS_ON MapRule.GotRuleMap;

  /* Since we currently don't know how to construct the abstract tree    */
  /* properly in the presence of rule mappings and bottomup constraints, */
  /* we have to issue an error to the user.                              */
  IF(INCLUDING Source.GotBottomUp,
    message(FATAL,
      "Rule mappings are not allowed in the presence of bottomup constraints",
      0, COORDREF));

  MapRule.ntcount = GetNTCount(MapProd.Key, 0)
			DEPENDS_ON INCLUDING Source.GotRule;
  MapRule.Key = MapProd.Key;
END;

/* Build up the rhs of the concrete rule */
SYMBOL MapProd INHERITS SymbolPListRoot END;

SYMBOL MapElement INHERITS SymbolPListElem COMPUTE
  SYNT.Symbol = CreateSymbol();
  SYNT.SymbolPElem = ORDER(SymbolKeySet(THIS.Symbol, THIS.Key),
			SymbolClassSet(THIS.Symbol, THIS.Class),
			THIS.Symbol);
END;

RULE: MapProd ::= MapLHS MapDelim MapAlt COMPUTE
  /* Based on the lhs and rhs, find the actual concrete rule key */
  MapProd.Key = FindConRule(MapLHS.Key, MapProd.SymbolPList);

  /* Give an error if the concrete rule could not be found in the grammar */
  IF(EQ(MapProd.Key, NoKey),
	message(FATAL, "Concrete rule is not present in grammar",
                0, COORDREF));
END;

RULE: MapLHS ::= Identifier COMPUTE
  MapLHS.Sym = Identifier;
END;

/* Make sure that a symbol from a mapping specification exists in the	*/
/* grammar.								*/
SYMBOL MapChkSymbol COMPUTE
  IF(EQ(THIS.Key, NoKey),
	message(FATAL, "Symbol is not present in grammar", 0, COORDREF));
END;

SYMBOL MapLHS INHERITS MapChkSymbol END;
SYMBOL MapElement INHERITS MapChkSymbol END;

RULE: MapElement ::= Identifier COMPUTE
  MapElement.Sym = Identifier;
  MapElement.Class = IDENTIFIER;
END;

RULE: MapElement ::= Text COMPUTE
  MapElement.Sym = Text;
  MapElement.Class = TEXT;
END;

/* Build up the reordered rhs of the concrete rule */
SYMBOL MapReorder INHERITS SymbolPListRoot END;

SYMBOL MapText INHERITS SymbolPListElem COMPUTE
  SYNT.Symbol = CreateSymbol();
  SYNT.SymbolPElem = ORDER(SymbolKeySet(THIS.Symbol, THIS.Key),
			SymbolClassSet(THIS.Symbol, TEXT),
			THIS.Symbol);
END;

CLASS SYMBOL SymbolPChkListElem COMPUTE
  THIS._cSymbolPListPtr =
    IF(SymbolPValid(THIS.SymbolPElem),
      RefEndConsSymbolPList (THIS._cSymbolPListPtr, THIS.SymbolPElem),
      THIS._cSymbolPListPtr);
END;

SYMBOL MapPosition INHERITS SymbolPChkListElem COMPUTE
  SYNT.SymbolPElem = GetNthNT(GetRHS(INCLUDING MapRule.Key, NULLSymbolPList),
				THIS.Sym)
			DEPENDS_ON INCLUDING Source.GotRule;
END;

CHAIN pos: intList;
ATTR olist: intList;

RULE: MapReorder ::= '<' MapReorderAlt '>' COMPUTE
  /* Create a list of the numbers representing the reordering positions */
  MapReorder.olist = MapReorderAlt.pos;
  CHAINSTART MapReorderAlt.pos = NULLintList;
END;

RULE: MapPosition ::= '$' Integer COMPUTE
  MapPosition.Sym = Integer;

  /* The reordering position cannot be greater than the number rhs	*/
  /* nonterminals in the rule.						*/
  IF(AND(GT(Integer, INCLUDING MapRule.ntcount),
         NE(INCLUDING MapRule.Key, NoKey)),
      message(FATAL, "Ordering number is larger than number of nonterminals",
              0, COORDREF));

  /* Add this position to the list, but make sure it doesn't already */
  /* exist in the list before inserting it.                          */
  MapPosition.pos = IF(ElemInintList(Integer, MapPosition.pos, intCmp),
                      ORDER(
                        message(FATAL, "Duplicates not allowed", 0, COORDREF),
                        MapPosition.pos),
                      AppElintList(MapPosition.pos, Integer));
END;

RULE: MapText ::= Text COMPUTE
  MapText.Sym = Text;
END;

RULE: MapChains ::= 'MAPCHAINS' COMPUTE
  MapChains.GotMapQChains = VOIDEN(ASSIGN(MapQChains, 1));
END;
@}

@$@<Mapping Properties@>==@{
Map: DefTableKey;	/* the abstract equivalent of a concrete symbol key */
AbsMap: DefTableKeyList;/* a list of the concrete symbols in the same	*/
			/* equivalence class with the abstract symbol	*/
"intList.h"
Order: intList;		/* the list of reordering positions for a rule	*/
EqClass: int [Is];	/* is the equivalence class a set of terms or	*/
			/* nonterms					*/
MappedRHS: SymbolPList;	/* flag to indicate that a concrete rule has a  */
			/* user specified mapping			*/
@}

@$@<Mapping Headers@>==@{
#ifndef MAP_H
#define MAP_H

#include "symbol.h"
#include "SymbolPList.h"
#include "intList.h"
#include "deftbl.h"
#include "err.h"
#include "oiladt2.h"
#include "eliproto.h"

/* Do not change these values.  It is important that they stay this way. */
#define T_TERM		0
#define T_NONTERM	1
#define T_ERROR		2	/* used if nonterms and terms are mixed	*/
				/* in an equivalence class: cannot be	*/
				/* 0 or 1				*/

#define ASSIGN(x,y)	((x)=(y))

#define SymbolPValid(s)	((s) != NULL)

extern int MapQChains;

extern int DefTableKeyCmp ELI_ARG((DefTableKey a, DefTableKey b));
extern int intCmp ELI_ARG((int a, int b));
extern SymbolP GetNthNT ELI_ARG((SymbolPList list, int n));
extern tOilSetSig CreateSignature ELI_ARG((SymbolPList rhs));
extern DefTableKey FindConRule ELI_ARG((DefTableKey lhs, SymbolPList rhs));
extern int RuleCmp ELI_ARG((DefTableKey rule1, DefTableKey rule2, int map));

#endif
@}

@$@<Mapping Functions@>==@{
#include "deftbl.h"
#include "err.h"
#include "obstack.h"
#include "pdl_gen.h"
#include "SymbolPList.h"
#include "DefTableKeyList.h"
#include "intList.h"
#include "map.h"
#include "match.h"
#include "symbol.h"
#include "tOilTypeSetList.h"

int MapQChains = 0;

/* On Entry:
 *   a - a definition table key
 *   b - another definition table key
 * On Exit:
 *   DefTableKeyCmp returns 1 if a and b are the same definition table keys,
 *   otherwise it returns 0.
 */
#ifdef PROTO_OK
int
DefTableKeyCmp (DefTableKey a, DefTableKey b)
#else
int
DefTableKeyCmp (a, b)
DefTableKey a;
DefTableKey b;
#endif
{
  if (a == b) return 0;
  else return 1;
}

/* On Entry:
 *   a - an integer
 *   b - another integer
 * On Exit:
 *   intCmp returns 1 if a and b are the same and 0 otherwise.
 */
#ifdef PROTO_OK
int
intCmp (int a, int b)
#else
int
intCmp (a, b)
int a;
int b;
#endif
{
  if (a == b) return 0;
  else return 1;
}

/* On Entry:
 *   list - a list representing the rhs of a rule
 *   pos - integer representing which rhs nonterminal to return
 * On Exit:
 *   GetNthNT returns a definition table key representing the nth nonterminal
 *   in list.  It skips over TEXT and GEN_IDENT keys and returns NoKey if no
 *   such nonterminal exists.
 */
#ifdef PROTO_OK
SymbolP
GetNthNT (SymbolPList list, int n)
#else
SymbolP
GetNthNT (list, n)
SymbolPList list;
int n;
#endif
{
  if (n == 0)
    return (SymbolP) 0;

  while (1) {
    /* Find the next IDENTIFIER symbol */
    while (list != NULLSymbolPList &&
	   SymbolClassGet(HeadSymbolPList(list)) != IDENTIFIER)
      list = TailSymbolPList(list);
    if (list == NULLSymbolPList)
      return (SymbolP)0;
    else if (!(--n))
      return HeadSymbolPList(list);
    else
      list = TailSymbolPList(list);
  }
}

/* On Entry:
 *   rhs - a reordered right hand side symbol list
 * On Exit:
 *   CreateSignature returns an OIL signature for the reordered right hand
 *   side for use by ConMatch to try to find an appropriate match.
 */
tOilSetSig
#ifdef PROTO_OK
CreateSignature (SymbolPList rhs)
#else
CreateSignature (rhs) SymbolPList rhs;
#endif
{
  tOilSetSig result;

  result = OilNewSetSig();

  if (rhs == NULLSymbolPList) {
    result = OilAddSetSig(OilTypeToSet(EmptyType),result);
  } else {
    while (rhs != NULLSymbolPList) {
      result = OilAddSetSig(CreateTS(SymbolKeyGet(HeadSymbolPList(rhs))),
			    result);
      rhs = TailSymbolPList(rhs);
    }
  }

  return result;
}

/* On Entry:
 *   rule1, rule2 - rule keys to be compared
 *   map - non-zero if RuleCmp should symbolically map symbols before
 *		comparing, zero if it should not map
 * On Exit:
 *   RuleCmp returns 1 if the rules match, 0 if they don't.
 *   Matching is done by checking each symbol of the rules with the
 *   corresponding symbol in the other.
 */
#ifdef PROTO_OK
int
RuleCmp (DefTableKey rule1, DefTableKey rule2, int map)
#else
int
RuleCmp (rule1, rule2, map)
DefTableKey rule1, rule2;
int map;
#endif
{
  DefTableKey key1, key2;
  SymbolPList rhs1, rhs2;
  SymbolP symbol1, symbol2;

  /* Compare the lhs' */
  key1 = GetLHS(rule1, NoKey);
  key2 = GetLHS(rule2, NoKey);
  if (map) {
    if (GetMap(key1, key1) != GetMap(key2, key2))
      return 0;
  } else if (key1 != key2)
    return 0;

  rhs1 = GetRHS(rule1, NULLSymbolPList);
  rhs2 = GetRHS(rule2, NULLSymbolPList);

  symbol1 = NextSymbol(&rhs1);
  symbol2 = NextSymbol(&rhs2);

  /* Compare each symbol of the rhs' */
  while (symbol1 && symbol2) {
    if (map) {
      if (GetMap(SymbolKeyGet(symbol1), SymbolKeyGet(symbol1)) !=
		GetMap(SymbolKeyGet(symbol2), SymbolKeyGet(symbol2)))
        return 0;
    } else if (SymbolKeyGet(symbol1) != SymbolKeyGet(symbol2))
      return 0;
    symbol1 = NextSymbol(&rhs1);
    symbol2 = NextSymbol(&rhs2);
  }

  if (symbol1 || symbol2)
    return 0;
  else
    return 1;
}

/* On Entry:
 *   lhs - symbol key representing the lhs of a rule
 *   rhs - list of symbol keys representing the rhs of a rule
 * On Exit:
 *   If a concrete rule is found which matches the descriptions of the
 *   arguments, then the key for the concrete rule found is returned,
 *   otherwise FindConRule returns NoKey.
 */
#ifdef PROTO_OK
DefTableKey
FindConRule (DefTableKey lhs, SymbolPList rhs)
#else
DefTableKey
FindConRule (lhs, rhs)
DefTableKey lhs;
SymbolPList rhs;
#endif
{
  DefTableKey key;
  DefTableKeyList conrules;

  /* Create a dummy rule key with the lhs and rhs given by the arguments */
  key = NewKey();
  ResetLHS(key, lhs);
  ResetRHS(key, rhs);

  /* Get a list of the concrete rules with the specified lhs and use	*/
  /* RuleCmp to compare them to the dummy rule just created.		*/
  conrules = GetConRules(lhs, NULLDefTableKeyList);
  while (conrules != NULLDefTableKeyList &&
	 !RuleCmp(HeadDefTableKeyList(conrules), key, 0))
    conrules = TailDefTableKeyList(conrules);

  if (conrules != NULLDefTableKeyList)
    return HeadDefTableKeyList(conrules);
  else
    return NoKey;
}
@}

@$@<Attribution Headers@>==@{
#include "map.h"
@}

@O@<map.lido@>==@{
@<Mapping Attribution@>
@}

@O@<map.pdl@>==@{
@<Mapping Properties@>
@}

@O@<map.c@>==@{
@<Mapping Functions@>
@}

@O@<map.h@>==@{
@<Mapping Headers@>
@}

@O@<map.head@>==@{
@<Attribution Headers@>
@}

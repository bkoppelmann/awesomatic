@A@<KnownKey@>

It is important that definition table keys be denotable values, so that a
specification can establish known keys with particular properties.

@B

A key value is specified by giving an identifier that will be used to denote
that key in other specifications, optionally followed by a list of
properties.
Property identifiers appearing in the list must be defined separately.
The values of the properties must be valid C initializers enclosed in
braces (@{{@} @{}@}).

@$@<Phrase structure@>==@{
FileDecl: KnownKey .

KnownKey: Identifier PropertyValueList ';' .
PropertyValueList: / '->' PropertyValues .
PropertyValues: PropertyValue // ',' .
PropertyValue: Identifier '=' Text .
@}

@B@<Name analysis@>

The known keys constitute a separate name space from the properties:

@$@<Name space for known keys@>==@{
$/Name/AlgScope.gnrc +instance=KnownKey +referto=KnownKey :inst
@}

@$@<Name analysis@>==@{
SYMBOL Source INHERITS KnownKeyRootScope END;
SYMBOL PropertyValues INHERITS KnownKeyRangeScope END;
SYMBOL KnownKey INHERITS KnownKeyIdDefScope END;
SYMBOL PropertyValue INHERITS KnownKeyIdDefScope COMPUTE
  IF(NE(GetKind(THIS.Key, Undefined), PropertyClass),
    message(ERROR, "Undefined property", 0, COORDREF));
END;

ATTR Sym: int;
ATTR Key: DefTableKey;

RULE: KnownKey ::= Identifier PropertyValueList ';'
COMPUTE
  KnownKey.Sym=Identifier;
END;

SYMBOL PropertyValues COMPUTE
  INH.KnownKeyEnv=
    ORDER(
      IF(EQ(GetEnv(INCLUDING KnownKey.KnownKeyKey,NoEnv),NoEnv),
        ResetEnv(
          INCLUDING KnownKey.KnownKeyKey,
          NewScope(INCLUDING Source.KnownKeyEnv))),
      GetEnv(INCLUDING KnownKey.KnownKeyKey,NoEnv));
END;

RULE: PropertyValue ::= Identifier '=' Text
COMPUTE
  PropertyValue.Sym=Identifier;
  PropertyValue.Key=KeyInEnv(INCLUDING Source.env, Identifier);
END;
@}

@B

@$@<Code the property list elements@>==@{
CHAIN ElementNum: int;
ATTR Element: PTGNode;
ATTR ElementInserted: VOID;

SYMBOL Source COMPUTE
  CHAINSTART HEAD.ElementNum=1 DEPENDS_ON (THIS.funcout, THIS.macroout);

  SYNT.GotText=CONSTITUENTS PropertyValue.GotText;

  SYNT.ElementInserted = CONSTITUENTS PropertyValue.ElementInserted;

  SYNT.Element=
    PTGElements(
      CONSTITUENTS PropertyValue.Element
        WITH (PTGNode, PTGSeq, IDENTICAL, PTGNull));
END;

RULE: PropertyValue ::= Identifier '=' Text
COMPUTE
  PropertyValue.GotText=IsText(PropertyValue.KnownKeyKey,Text,0);
  IF(AND(
      HasText(PropertyValue.KnownKeyKey),
      NOT(GetText(PropertyValue.KnownKeyKey,0))),
    message(ERROR, "More than one initializer for the same property",
            0, COORDREF)) <- INCLUDING Source.GotText;

  PropertyValue.ElementNum=ADD(PropertyValue.ElementNum,1);

  PropertyValue.ElementInserted=
    ListInsertValueList(
      INCLUDING KnownKey.KnownKeyKey,
      CreateElement(
        GetSelector(PropertyValue.Key,0),
        PTGElementName(PTGNum(PropertyValue.ElementNum)),
        GetTypeName(GetType(PropertyValue.Key,NoKey),PTGNULL),
        Text));

  PropertyValue.Element=
    IF(GetElementDone(INCLUDING KnownKey.KnownKeyKey,0),
      PTGNULL,
      ORDER(
        ResetElementDone(INCLUDING KnownKey.KnownKeyKey,1),
        GenElements(
          GetValueList(INCLUDING KnownKey.KnownKeyKey,NULLElementList))))
    DEPENDS_ON INCLUDING Source.ElementInserted;
END;
@}

@$@<Property element templates@>==@{
Elements:
  "static struct PropElt PDLe0 = {(Entry)0, 0};\n"
  $

Element:
  "static struct " $ "Elt " $ " = {(Entry)&" $ ", " $ ", " $ "};\n"

ElementName:
  "PDLe" $

Value: [ StripText $ int ]
@}

@$@<Print a text specification without the outermost braces@>==@{
#include <stdio.h>
#include "csm.h"

void
#if defined(__cplusplus) || defined(__STDC__)
StripText(FILE *f, int val)
#else
StripText(f, val) FILE *f; int val;
#endif
{ register char *p = StringTable(val) + 1;
  register char c = *p++;

  while (*p) { putc(c, f); c = *p++; }
}
@}

@$@<Property of known keys@>==@{
"ElementList.h"
ValueList: ElementList [ ListInsert, First ];
Text: int [ Is, Has ];
@}

@$@<Instantiate the list module@>==@{
$/Adt/List.gnrc +instance=Element +referto=Element :inst
@}

@$@<Definition of an element in the ElementList@>==@{
typedef struct NameElt {
  int selector;
  PTGNode name;
  PTGNode TypeName;
  int value;
} *Element;
@}

@$@<Function to create an Element@>==@{
#include "ptg_gen.h"
#include "KnownKey.h"

Element
#if defined(__cplusplus) || defined(__STDC__)
CreateElement (int selector, PTGNode name, PTGNode TypeName, int value)
#else
CreateElement (selector, name, TypeName, value)
int selector;
PTGNode name;
PTGNode TypeName;
int value;
#endif
{
  Element result;
  result = (Element)malloc(sizeof(struct NameElt));
  result->selector = selector;
  result->name = name;
  result->TypeName = TypeName;
  result->value = value;
  return result;
}
@}

@$@<Ordered comparison on Elements@>==@{
#include "KnownKey.h"

int
#if defined(__cplusplus) || defined(__STDC__)
CmpElements (Element x, Element y)
#else
CmpElements (x, y)
Element x, y;
#endif
{
  if (x->selector < y->selector)
    return 1;
  else if (x->selector > y->selector)
    return -1;
  else
    return 0;
}
@}

@$@<PDL operation to do an ordered insert into an ElementList@>==@{
"KnownKey.h"

void
ListInsert (DefTableKey key, Element elt)
{
  if (!ACCESS)
    VALUE = NULLElementList;
  VALUE = OrderedInsertElementList(VALUE, elt, CmpElements);
}
@}

@$@<PDL operation to get the first element in an ElementList@>==@{
PTGNode
First (DefTableKey key)
{
  if (PRESENT)
    return HeadElementList(VALUE)->name;
  else
    return PTGEndList();
}
@}

@$@<Generate all of the elements for a key@>==@{
#include "ptg_gen.h"
#include "ElementList.h"

PTGNode
#if defined(__cplusplus) || defined(__STDC__)
GenElements (ElementList list)
#else
GenElements (list)
ElementList list;
#endif
{
  Element elt;

  if (list == NULLElementList)
    return PTGNULL;
  else {
    elt = HeadElementList(list);
    return PTGSeq(
             GenElements(
               TailElementList(list)),
             PTGElement(
               elt->TypeName,
               elt->name,
               (TailElementList(list)==NULLElementList ?
                  PTGEndList() :
                  HeadElementList(TailElementList(list))->name),
               PTGNum(elt->selector),
               PTGValue(elt->value)));
  }
}
@}

@$@<Detect when elements of a key have been generated@>==@{
ElementDone: int;
@}

@$@<Environment property@>==@{
"envmod.h"
Env: Environment;
@}

@B

@$@<Code the definition table keys@>==@{
CHAIN KeyIndex: int;
ATTR Define, Array, ArrayElts: PTGNode;

SYMBOL Source INHERITS KnownKeyRangeFirstOcc COMPUTE
  CHAINSTART HEAD.KeyIndex=0 DEPENDS_ON TAIL.ElementNum;
  SYNT.Define=
    PTGDefines(
      CONSTITUENTS KnownKey.Define
        WITH (PTGNode, PTGSeq, IDENTICAL, PTGNull));
  SYNT.ArrayElts=
    CONSTITUENTS KnownKey.Array
      WITH (PTGNode, PTGARRAYSEQ, IDENTICAL, PTGNull);
  SYNT.Array=
    IF(NE(SYNT.ArrayElts,PTGNULL),
      PTGArray(
        CONSTITUENTS KnownKey.Array
          WITH (PTGNode, PTGARRAYSEQ, IDENTICAL, PTGNull)),
      PTGNULL);
END;

SYMBOL KnownKey INHERITS KnownKeyFirstOcc END;

RULE: KnownKey ::= Identifier PropertyValueList ';'
COMPUTE
  KnownKey.Define=
    IF(KnownKey.IsKnownKeyFirstOcc,
      PTGDefine(PTGIdentifier(Identifier),PTGNum(KnownKey.KeyIndex)),
      PTGNULL);
  KnownKey.KeyIndex=
    IF(KnownKey.IsKnownKeyFirstOcc,
      ADD(KnownKey.KeyIndex,1),
      KnownKey.KeyIndex);
  KnownKey.Array=
    IF(KnownKey.IsKnownKeyFirstOcc,
      PTGArrayElt(FirstValueList(KnownKey.KnownKeyKey)),
      PTGNULL)
    DEPENDS_ON INCLUDING Source.Element;
END;
@}

@$@<Array templates@>==@{
Array:
  "\nstruct PropList PDLk[] = {\n"
  $
  "};\n"

ArrayElt:
  "  {(Entry)&" $ "}"

EndList:
  "PDLe0"

ArraySeq:
  $ ",\n" $

Defines:
  "extern struct PropList PDLk[];\n\n"
  $

Define:
  "#define " $ " (&PDLk[" $ "])\n"
@}

@$@<Omit null elements from array sequences@>==@{
#define PTGARRAYSEQ(x,y) \
((x)==PTGNULL?(y):((y)==PTGNULL?(x):PTGArraySeq((x),(y))))
@}

@$@<Instantiate the module to do something once@>==@{
$/Prop/FirstOcc.gnrc +instance=KnownKey +referto=KnownKey :inst
@}

@B@<Specification files@>

@C

@O@<KnownKey.con@>@{
@<Phrase structure@>
@}

@C

@O@<KnownKey.lido@>@{
@<Name analysis@>
@<Code the property list elements@>
@<Code the definition table keys@>
@}

@C

@O@<KnownKey.pdl@>@{
@<Environment property@>
@<Property of known keys@>
@<Detect when elements of a key have been generated@>
@<PDL operation to do an ordered insert into an ElementList@>
@<PDL operation to get the first element in an ElementList@>
@}

@C

@O@<KnownKey.ptg@>@{
@<Property element templates@>
@<Array templates@>
@}

@C

@O@<KnownKey.c@>@{
static char rcsid[] =
  "$Id: KnownKey.fw,v 1.7 2007/01/29 16:46:42 profw Exp $";

@<Print a text specification without the outermost braces@>
@<Function to create an Element@>
@<Ordered comparison on Elements@>
@<Generate all of the elements for a key@>
@}

@C

@O@<Element.h@>@{
#ifndef ELEMENT_H
#define ELEMENT_H

#include "ptg_gen.h"

@<Definition of an element in the ElementList@>

#endif
@}

@O@<KnownKey.h@>@{
#ifndef KNOWNKEY_H
#define KNOWNKEY_H

#include <stdio.h>
#include "ptg_gen.h"
#include "ElementList.h"

#if defined(__cplusplus) || defined(__STDC__)
extern void StripText(FILE *f, int val);
extern Element CreateElement(int selector, PTGNode name,
                             PTGNode TypeName, int value);
extern int CmpElements(Element x, Element y);
extern PTGNode GenElements(ElementList list);
#else
extern void StripText();
extern Element CreateElement();
extern int CmpElements();
extern PTGNode GenElements();
#endif

#endif
@}

@C

@O@<KnownKey.head@>@{
#include "KnownKey.h"
@<Omit null elements from array sequences@>
@}

@C

@O@<KnownKey.specs@>@{
@<Name space for known keys@>
@<Instantiate the module to do something once@>
@<Instantiate the list module@>
@}

# Input Object Types

:c 'C source code'? => :FILE;


# Intermediate Object Types

:ln 'local static semantic analysis of C code' => :FILE;

:lint1.log 'messages from first phase of lint' => :FILE;


# Output Object Types

:lint 'static semantic analysis of C code'? => :FILE;


# Parameter Types

+ln 'a lint library'? => :LIST;

+define 'macro definition'? => :cat;

+inc_sp 'name of a directory in an include search path'? => :ls;

+stub 'stub to keep Lint quiet about unused functions'? => :LIST;

+ignore_mesg 'message to ignore'? => :cat;

+global_ignore_mesg 'message to ignore in global second lint pass' => :cat;

+lint_flags 'Lint flags'? => :cat;

+home 'home directory for relative pathnames' => :first;


# Environment Variables

$ODIN_LINT_PASS1_FLAG 'pass-1 only lint flag' = '-c';

$ODIN_LINT_FLAGS 'lint flags' = '';


# Tools

EXEC (lint1.sh) (:c) (:c :dir)@ (+inc_sp) (+define) (+lint_flags)
 (+ignore_mesg) NEEDS (:c +home=(:c :dir) :lookup=:all_c_inc)
   => (:ln) (:lint1.log);

EXEC (lint.sh) (:code.list :map=:ln :ls) (:code.list :map=:lint1.log :ls)
 (+stub :map=:ln :ls) (+ln :ls) (+lint_flags) (+ignore_mesg)
 (+global_ignore_mesg)
 NEEDS (:code.list :map=:ln) (:code.list :map=:lint1.log)
 (+stub :map=:ln) (+ln)
   => (:lint);

#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#ifndef YYSTYPE
#define YYSTYPE int
#endif
YYSTYPE yylval, yyval;
# define YYERRCODE 256

# line 226 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"

#include "inc/GMC.h"
extern int num_ParseErrors;
tp_Nod YY_Parse() {tp_Nod Nod;
num_ParseErrors = 0; Init_Lex(); Init_ConstructTree();
(void)yyparse(); Nod = End_ConstructTree();
return Nod;}
void yyerror(s) char *s; {num_ParseErrors++; ParseError(s);}
int yylex() {return YY_Lex();}
int yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
	};
# define YYNPROD 54
# define YYLAST 88
int yyact[]={

    11,    36,    10,    58,    51,    46,    63,    35,    22,    75,
    21,    37,    12,    13,    74,    71,    49,    28,    22,    18,
    21,    13,    59,    67,    68,    66,    47,    69,    38,    56,
    64,    48,    39,    40,    41,    42,    33,    29,    19,    20,
    32,    31,    43,    30,    13,    12,    13,    12,    13,    53,
     9,    50,    37,    61,    60,    62,    26,    65,    16,    23,
     7,     4,    57,    52,    70,    65,    55,    61,    60,    62,
    73,    72,    54,    45,    44,    34,    25,    27,    15,    17,
     6,     8,     3,    24,    14,     5,     2,     1 };
int yypact[]={

    57, -1000,    55, -1000,    38,    52, -1000,    36,    38, -1000,
 -1000, -1000, -1000, -1000,    49, -1000,    34,    36, -1000,    32,
    30,    29,    25, -1000, -1000, -1000,    44,    34, -1000, -1000,
    44,    44,    44,    44,    44, -1000,    13, -1000, -1000, -1000,
 -1000, -1000,    19, -1000,    -1,    13, -1000, -1000,    34, -1000,
 -1000,    17,     3, -1000, -1000, -1000,    11, -1000,     9, -1000,
 -1000, -1000, -1000,    -3,    34, -1000,     3, -1000, -1000, -1000,
    -6, -1000,   -11, -1000, -1000, -1000 };
int yypgo[]={

     0,    87,    86,    85,    84,    83,    82,    81,    50,     2,
     0,    80,    79,    19,     1,    78,    77,    76,    75,     7,
    74,    73,     5,     4,    72,    66,    63,    62,     3,     6 };
int yyr1[]={

     0,     1,     2,     6,     6,     7,     7,     8,     8,     3,
    11,    11,    12,    12,    13,    13,    13,    13,     4,    15,
    15,    16,    16,     5,    17,    17,    18,    18,    19,    20,
    21,    21,    22,    24,    24,    23,    26,    26,    27,    27,
    27,    27,    27,    28,    28,    28,    28,    25,    25,    25,
    29,    14,     9,    10 };
int yyr2[]={

     0,     9,     3,     4,     1,     5,     2,     2,     2,     3,
     4,     1,     5,     2,     7,     7,     7,    11,     3,     4,
     1,     5,     2,     3,     4,     1,     5,     2,     7,     3,
     5,     2,     7,     2,     1,     3,     5,     1,     7,     5,
     5,     5,     2,     6,     2,     2,     2,     4,     7,     9,
     2,     3,     3,     3 };
int yychk[]={

 -1000,    -1,    -2,    -6,     4,    -3,   -11,     5,    -7,    -8,
    -9,   -10,     9,    10,    -4,   -15,     6,   -12,   -13,     2,
     3,    -9,   -10,    -8,    -5,   -17,     7,   -16,   -10,   -13,
    11,    11,    11,    11,   -18,   -19,   -14,     8,   -10,   -14,
   -14,   -14,   -14,   -19,   -20,   -21,   -22,    13,    12,    17,
   -22,   -23,   -26,   -10,   -24,   -25,    12,   -27,   -28,    19,
   -14,   -10,    -9,   -29,    19,   -10,    16,    14,    15,    18,
   -23,    18,   -29,   -28,    20,    20 };
int yydef[]={

     4,    -2,    11,     2,     0,    20,     9,     0,     3,     6,
     7,     8,    52,    53,    25,    18,     0,    10,    13,     0,
     0,     0,     0,     5,     1,    23,     0,    19,    22,    12,
     0,     0,     0,     0,    24,    27,     0,    51,    21,    14,
    15,    16,     0,    26,     0,    29,    31,    37,     0,    28,
    30,    34,    35,    17,    32,    33,     0,    36,    42,    37,
    44,    45,    46,    47,     0,    50,     0,    39,    40,    41,
     0,    48,     0,    38,    43,    49 };
typedef struct { char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	".EOF",	2,
	".ERR",	3,
	".INCLUDE",	4,
	".SCANNER",	5,
	".NODES",	6,
	".RULES",	7,
	".Name",	8,
	".AString",	9,
	".QString",	10,
	".=",	11,
	".=>",	12,
	".->",	13,
	".+",	14,
	".*",	15,
	".//",	16,
	".;",	17,
	".?",	18,
	".(",	19,
	".)",	20,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"xTreeGrammar : xIncludes xScanner xNodes xRules",
	"xIncludes : xIncludes_1",
	"xIncludes_1 : '.INCLUDE' xIncludes_101",
	"xIncludes_1 : /* empty */",
	"xIncludes_101 : xIncludes_101 xIncludeFile",
	"xIncludes_101 : xIncludeFile",
	"xIncludeFile : xAStringleaf",
	"xIncludeFile : xQStringleaf",
	"xScanner : xScanner_1",
	"xScanner_1 : '.SCANNER' xScanner_101",
	"xScanner_1 : /* empty */",
	"xScanner_101 : xScanner_101 xLexicalDefinition",
	"xScanner_101 : xLexicalDefinition",
	"xLexicalDefinition : '.EOF' '.=' xNameleaf",
	"xLexicalDefinition : '.ERR' '.=' xNameleaf",
	"xLexicalDefinition : xAStringleaf '.=' xNameleaf",
	"xLexicalDefinition : xQStringleaf '.=' xNameleaf '.=>' xQStringleaf",
	"xNodes : xNodes_1",
	"xNodes_1 : '.NODES' xNodes_101",
	"xNodes_1 : /* empty */",
	"xNodes_101 : xNodes_101 xQStringleaf",
	"xNodes_101 : xQStringleaf",
	"xRules : xRules_1",
	"xRules_1 : '.RULES' xRules_101",
	"xRules_1 : /* empty */",
	"xRules_101 : xRules_101 xRule",
	"xRules_101 : xRule",
	"xRule : xNameleaf xAlternateList '.;'",
	"xAlternateList : xAlternateList_1",
	"xAlternateList_1 : xAlternateList_1 xAlternate",
	"xAlternateList_1 : xAlternate",
	"xAlternate : '.->' xExpression xAlternate_1",
	"xAlternate_1 : xTreeSpec",
	"xAlternate_1 : /* empty */",
	"xExpression : xExpression_1",
	"xExpression_1 : xExpression_1 xTerm",
	"xExpression_1 : /* empty */",
	"xTerm : xElement './/' xElement",
	"xTerm : xElement '.+'",
	"xTerm : xElement '.*'",
	"xTerm : xElement '.?'",
	"xTerm : xElement",
	"xElement : '.(' xExpression '.)'",
	"xElement : xNameleaf",
	"xElement : xQStringleaf",
	"xElement : xAStringleaf",
	"xTreeSpec : '.=>' xNodeName",
	"xTreeSpec : '.=>' xNodeName '.?'",
	"xTreeSpec : '.=>' '.(' xNodeName '.)'",
	"xNodeName : xQStringleaf",
	"xNameleaf : '.Name'",
	"xAStringleaf : '.AString'",
	"xQStringleaf : '.QString'",
};
#endif /* YYDEBUG */
#line 1 "/usr/lib/yaccpar"
/*	@(#)yaccpar 1.10 89/04/04 SMI; from S5R3 1.10	*/

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	{ free(yys); free(yyv); return(0); }
#define YYABORT		{ free(yys); free(yyv); return(1); }
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-1000)

/*
** static variables used by the parser
*/
static YYSTYPE *yyv;			/* value stack */
static int *yys;			/* state stack */

static YYSTYPE *yypv;			/* top of value stack */
static int *yyps;			/* top of state stack */

static int yystate;			/* current state */
static int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */

int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */


/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
int
yyparse()
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */
	unsigned yymaxdepth = YYMAXDEPTH;

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yyv = (YYSTYPE*)malloc(yymaxdepth*sizeof(YYSTYPE));
	yys = (int*)malloc(yymaxdepth*sizeof(int));
	if (!yyv || !yys)
	{
		yyerror( "out of memory" );
		return(1);
	}
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

	goto yystack;
	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			(void)printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				(void)printf( "end-of-file\n" );
			else if ( yychar < 0 )
				(void)printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				(void)printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ yymaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int yyps_index = (yy_ps - yys);
			int yypv_index = (yy_pv - yyv);
			int yypvt_index = (yypvt - yyv);
			yymaxdepth += YYMAXDEPTH;
			yyv = (YYSTYPE*)realloc((char*)yyv,
				yymaxdepth * sizeof(YYSTYPE));
			yys = (int*)realloc((char*)yys,
				yymaxdepth * sizeof(int));
			if (!yyv || !yys)
			{
				yyerror( "yacc stack overflow" );
				return(1);
			}
			yy_ps = yys + yyps_index;
			yy_pv = yyv + yypv_index;
			yypvt = yyv + yypvt_index;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			(void)printf( "Received token " );
			if ( yychar == 0 )
				(void)printf( "end-of-file\n" );
			else if ( yychar < 0 )
				(void)printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				(void)printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				(void)printf( "Received token " );
				if ( yychar == 0 )
					(void)printf( "end-of-file\n" );
				else if ( yychar < 0 )
					(void)printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					(void)printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
				yynerrs++;
			skip_init:
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						(void)printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					(void)printf( "Error recovery discards " );
					if ( yychar == 0 )
						(void)printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						(void)printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						(void)printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			(void)printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 28 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(1,4);} break;
case 2:
# line 32 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(2,1);} break;
case 4:
# line 40 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 5:
# line 45 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 9:
# line 57 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(3,1);} break;
case 11:
# line 65 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 12:
# line 70 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 14:
# line 78 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(4,1);} break;
case 15:
# line 82 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(5,1);} break;
case 16:
# line 86 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(6,2);} break;
case 17:
# line 92 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(7,3);} break;
case 18:
# line 96 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(8,1);} break;
case 20:
# line 104 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 21:
# line 109 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 23:
# line 115 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(9,1);} break;
case 25:
# line 123 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 26:
# line 128 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 28:
# line 136 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(10,2);} break;
case 29:
# line 140 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(11,1);} break;
case 30:
# line 145 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 32:
# line 153 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(12,2);} break;
case 34:
# line 160 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 35:
# line 164 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(-13,1);} break;
case 36:
# line 169 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,2);} break;
case 37:
# line 171 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(0,0);} break;
case 38:
# line 177 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(14,2);} break;
case 39:
# line 180 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(15,1);} break;
case 40:
# line 183 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(16,1);} break;
case 41:
# line 186 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(17,1);} break;
case 48:
# line 209 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(18,1);} break;
case 49:
# line 214 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(19,1);} break;
case 51:
# line 220 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(20,-1);} break;
case 52:
# line 222 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(21,-1);} break;
case 53:
# line 224 "/net/xlendi/usr4/ASGARD/geoff.ws/ODIN/geoff.27-Feb.1657.1995.83/FILES/b/tregrm.ygi.106770.y"
{Action(22,-1);} break;
	}
	goto yystack;		/* reset registers in driver code */
}

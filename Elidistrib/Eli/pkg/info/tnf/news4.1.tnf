\input texinfo   @c -*-texinfo-*-
@comment Copyright, 1996, University of Paderborn
@comment Copyright, 1997 Anthony M. Sloane
@comment %**start of header
@setfilename news
@settitle New Features of Eli Version 4.1
@setchapternewpage odd
@comment %**end of header

@titlepage
@center @titlefont{New Features of Eli Version 4.1}
@sp 4
@center Uwe Kastens
@sp 1
@center University of Paderborn
@center D-33098 Paderborn
@center FRG
@sp 2
@center A. M. Sloane
@sp 1
@center Department of Computing
@center School of Mathematics, Physics, Computing and Electronics
@center Macquarie University
@center Sydney, NSW 2109 
@center Australia
@sp 2
@center W. M. Waite
@sp 1
@center Department of Electrical and Computer Engineering
@center University of Colorado
@center Boulder, CO  80309-0425
@center USA
@sp 8
@center $Revision: 4.4 $
@end titlepage

@iftex 
@finalout
@end iftex

@node top, Liga, (news), (news)
@ifinfo
@comment  node-name,  next,  previous,  up
@unnumbered New Features of Eli Version 4.1

$Revision: 4.4 $
@end ifinfo

This document gives information about new facilities available in Eli
version 4.1 and those modifications made since the previous distributed
Eli version 4.0 that might be of general interest. Numerous corrections,
improvements, and additions have been made without being described
here. They shall just help users to solve their problem without taking
notice of Eli's mechanism.

@menu
* Liga::            LIDO Language and Liga System
* ModLib::          Specification Module Library
* Clp::             Command-line processing
* Monitoring::      Tree and Attribution Monitoring
* Unparsing::       Abstract Syntax Tree Unparsing
* FunnelWeb::       FunnelWeb Output Specification
* Miscellaneous::   Specification Processing
* Index::           
@end menu

@node Liga, ModLib, top, top
@chapter LIDO Language and Liga System

The modifications of the Lido language and the Liga system
refer to the following topics: The use of symbol computations
is further simplified by removal of certain restrictions,
and by introduction of some new constructs.
Some restrictions on bottom-up evaluation are removed.
A mechanism has been installed such that messages given by
the C compiler on the generated evaluator are related back to
the Lido text.

None of the modifications invalidates existing Lido specifications.

For complete descriptions of the modified constructs see the 
Liga documentation:
@xref{top,,,lidoref,LIDO -- Reference Manual}.
@xref{top,,,comptrees,LIDO - Computation in Trees}.

@menu
* CONSTITUENTS Restrictions Removed::  
* CHAIN in Empty Rules::         
* Grammar Root Symbol::  
* Right-Hand Side Access::  
* Bottom-up Evaluation::        
@end menu

@node CONSTITUENTS Restrictions Removed, CHAIN in Empty Rules, Liga, Liga
@section CONSTITUENTS Restrictions Removed

@findex @code{CONSTITUENTS}
If a symbol computation contains a CONSTITUENTS construct, like
@example
  CLASS SYMBOL CS COMPUTE
    SYNT.c = f (CONSTITUENTS X.a WITH (t, f2, f1, f0));
  END;
@end example
it was not allowed to inherit CS to a symbol that has a
production with an empty right-hand side.
It was also a violation if X were a CLASS symbol that is
not inherited to any symbol. This was sometimes annoying,
especially when using library modules.

Both restrictions have been removed. The result of the CONSTITUENTS
is in such cases the result of the @code{f0}-function.
A VOID CONSTITUENTS is replaced by nothing in such cases.

@xref{CONSTITUENT(S),,CONSTITUENT(S),lidoref,LIDO -- Reference Manual}.

@node CHAIN in Empty Rules, Grammar Root Symbol, CONSTITUENTS Restrictions Removed, Liga
@section CHAIN in Empty Rules

@findex @code{TAIL}
@findex @code{HEAD}
@findex @code{CHAINSTART}
@findex empty rules
It was a violation if a computation containing a TAIL chain access
is inherited to a symbol that has a production with an 
empty right-hand side. A HEAD computation was dropped in such cases.
This was sometimes annoying, especially when using library modules.
This restriction has been removed. 

Now, if a computation that contains a CHAINSTART, HEAD, or TAIL
is inherited to a rule with an empty right-hand side,
its effect is as if there was a symbol on the right-hand side
that passes the chain unchanged.

@xref{CHAIN,,CHAIN,lidoref,LIDO -- Reference Manual}.

@node Grammar Root Symbol, Right-Hand Side Access, CHAIN in Empty Rules, Liga
@section Grammar Root Symbol

@findex @code{ROOTCLASS}
@findex grammar root
The 
@example
  CLASS SYMBOL ROOTCLASS END;
@end example
is predefined without any computation.
It is inherited to the particular root symbol of the tree grammar.

This facility is especially useful for writing grammar independent
modules which need to associate computations to the grammar root.
Module users then do not need to explicitly inherit a root role.

@xref{Predefined Entities,,Predefined Entities,lidoref,LIDO -- Reference Manual}.

@node Right-Hand Side Access, Bottom-up Evaluation, Grammar Root Symbol, Liga
@section Right-Hand Side Access

@findex right-hand side
The entities @code{TermFct}, @code{RhsFct}, and @code{RULENAME}
are predefined to simplify symbol computations that access
the right-hand side of rules they are inherited to.

@xref{Predefined Entities,,Predefined Entities,lidoref,LIDO -- Reference Manual}.

@findex @code{TermFct}
@findex terminal access
A function @code{TermFct} is predefined to be used for systematic
access of terminal values in computations. It is intended to be
used in computations of @code{CLASS SYMBOL}s:
@example
  CLASS SYMBOL LeafNode COMPUTE
    SYNT.Ptg = TermFct ("ToPtg", TERM);
  END;
  SYMBOL LiteralExpr INHERITS LeafNode END;
@end example

If there were the following two rules for @code{LiteralExpr} 
that derive to different terminals, then
the above computation is expanded as shown below:
@example
  RULE: LiteralExpr ::= IntNumber COMPUTE
    LiteralExpr.Ptg = ToPtgIntNumber (IntNumber);
  END;
  RULE: LiteralExpr ::= FloatNumber COMPUTE
    LiteralExpr.Ptg = ToPtgFloatNumber (FloatNumber);
  END;
@end example
Suitable functions have to be defined for the calls constructed
by prefixing the terminal name with the string given in the
@code{TermFct} call.

@findex @code{RhsFct}
A call of the predefined function @code{RhsFct (C_String, arguments ...)}
is substituted by a call
of a function whose name is composed of the @code{C_String} and
and two numbers that indicate how many nonterminals and terminals
are on the right-hand side of the rule that has (or inherits) this call.
The remaining arguments are taken as arguments of the substituted
call. E.g. in a rule @code{RULE: X ::= Id Y Id Z Id END;},
where @code{Y, Z} are nonterminals, and @code{Id} is a terminal,
a call @code{RhsFct ("PTGChoice", a, b)} is substituted by
@code{PTGChoice_2_3 (a, b)}.
Usually, @code{RhsFct} will be used in symbol computations,
having arguments that are obtained by the @code{RHS} construct and
by a @code{TermFct} call.

@findex @code{RULENAME}
@findex rule name
@code{RULENAME} can be used in computations. It is replaced
by the rule name as a string literal.

@node Bottom-up Evaluation,  , Right-Hand Side Access, Liga
@section Bottom-up Evaluation

@findex @code{BOTTOMUP}
@findex @code{BOTTOM_UP}
@findex @code{TREE_COMPLETE}
@findex @code{computed trees}
@findex bottom-up
Liga's strategy for scheduling @code{BOTTOMUP} computations has
been changed: The generated evaluator performs computations
during the tree construction phase if and only if there are
some computations marked @code{BOTTOMUP}.

@xref{Computations,,Computations,lidoref,LIDO -- Reference Manual}.

Requesting @code{BOTTOM_UP} or @code{TREE_COMPLETE} in a 
@code{.ctl} file is now unnecessary and meaningless.

@xref{Order Options,,Order Options,lcl,LIGA - Control Language}.

Attributes are 
computed during the tree construction  phase only if they are needed for
@code{BOTTOMUP} computations. That strategy reduces the size
of the tree in general.

Information about the results of Liga's analysis for @code{BOTTOMUP}
can be obtained by deriving @code{OrdInfo}.

The restrictions on @code{BOTTOMUP} computations have been relaxed:
The facility of subtrees being built by computations may be
used together with some other computations being marked @code{BOTTOMUP},
unless computations in such generated subtrees are preconditions
for @code{BOTTOMUP} computations.

Furthermore, chain productions may be introduced into the tree grammar,
if necessary, without having corresponding chain productions in the
concrete grammar, as long as they are not involved in @code{BOTTOMUP}
computations. This situation is automatically checked in cooperation
between Liga and the Maptool.
@findex generated trees
@findex chain production

@node ModLib, Clp, Liga, top
@chapter Specification Module Library

Many library modules provide some symbol role, e.g. @code{RootScope}, 
that has to be inherited to a tree grammar symbol which is usually the root of
the tree grammar. These moduls are modified such that those
root roles are automatically associated to @code{ROOTCLASS},
which stands for the tree grammar root.
@xref{Grammar Root Symbol,,Grammar Root Symbol}.
@findex ROOTCLASS
@findex root roles

All name analysis modules have been adapted to the modifications
of the environment module. These changes should not invalidate
existing uses of the modules.

@xref{top,,Name Analysis Library,name,Specification Module Library: Name Analysis}.

@menu
* Environment Module Enhancements::
* Module for Testing Name Analysis::
* ChainPtg obsolete::           
* Sort added::                  
* Separator added::
* Instanciation of Modules with Filenames::
@end menu

@node Environment Module Enhancements, Module for Testing Name Analysis, ModLib, ModLib
@section Environment Module Enhancements

@findex Environment Module
@findex envmod
@findex object-oriented
@findex binding
The environment module @code{envmod.[ch]} has been augmented by
functions and macros that further support name analysis for object-oriented
languages, i.e. name analysis with scopes that inherit from other scopes.

The module was also augmented by functions that return a binding
instead of a definition table key. A binding is a triple
@code{(int idn, Environment sc, DefTableKey key)}, for an identifier
@code{idn} that is bound to @code{key} in the scope @code{sc}.

A full description of the interface of the module is given in
the name analysis part of the module library documentation.
(It has been moved there from its previous place in the documentation
of Eli library routines.).

@xref{Environment Module,,Environment Module,name,
Specification Module Library: Name Analysis}.

Existing uses of the module should not be invalidated by these
changes.

@node Module for Testing Name Analysis, ChainPtg obsolete, Environment Module Enhancements, ModLib
@section Module for Testing Name Analysis

@findex ShowBinding
@findex name analysis test
A module is provided which augments the specified processor such that it
produces output that makes the results of name analysis visible.
For each identifier occurrence that has one of the identifier
roles of the name analysis modules a line of the form
@example
   m in line 23 bound in line 4 of scope in line 3
@end example
@noindent
is written to the standard output file.
In general it is sufficient just to instantiate the module
@code{ShowBinding} with the same instance parameter as used for the 
basic name analysis module.

@xref{Name Analysis Test,,Name Analysis Test,name,
Specification Module Library: Name Analysis}.

@node ChainPtg obsolete, Sort added, Module for Testing Name Analysis, ModLib
@section Module @code{ChainPtg} obsolete

@findex ChainPtg
Module @code{ChainPtg} was obsolete with Version 3.6 of the Eli-System.
This module has now been removed without replacement.

To collect PTG-Nodes for output, use @code{CONSTITUENTS}-Construct in
Combination with the Pattern @code{Seq} of the new Module @code{PtgCommon}.

@xref{CONSTITUENTS, , Using LIDO CONSTITUENTS, ptg, Pattern-Based Text Generator},
for details.

@node Sort added, Separator added, ChainPtg obsolete, ModLib
@section Module @code{Sort} added

@findex Sort
A generic sorting module has been added to the library.
This module can be instantiated for any data type, and sorts an array whose
elements are of that data type.
A user-supplied function defines the collating sequence, so that any
arbitrary ordering is possible.
The sort is done in place, so that the array after the sort is a
permutation of the array before the sort.

@xref{Sort, , Sorting Elements of an Array, problems,
Specification Module Library: Common Problems}, for details.

@node Separator added, Instanciation of Modules with Filenames, Sort added, ModLib
@section Module @code{Separator} added
@findex Separator

This is a new PTG output module that allows separators to be inserted
into the output stream depending on the last string printed and the next
string to be printed.

@xref{Separator, , Introduce Separators in PTG Output, output,
Specification Module Library: Generating Output}, for details.

@node Instanciation of Modules with Filenames, , Separator added, ModLib
@section Instanciation of Modules with Filenames

@findex @code{inst}-derivation
@findex instanciating modules from @code{.fw}-files
@findex PreDefId-Module
@findex Operator-Module

To instanciate modules, that require filenames as their arguments from 
within a @code{.fw}-files previously required specification of the
@code{.fw}-file generating it. This is now no longer required. 

For example, to instanciate the @code{PreDefId}-Module with a
filename @code{predef.d}, the following example now works within and 
outside from a @code{.fw} specification:

@example
   $/Name/PreDefId.gnrc +referto=(Predef.d) :inst
@end example

@xref{Predefined Identifiers, , Predefined Identifiers, name, Specification
Module Library: Name Analysis}, and @ref{Operator, , Operator Identification, type, 
Specification Module Library: Type Analysis}, for more information.

@node Clp, Monitoring, ModLib, top
@chapter Command-line processing

@findex command-line processing
The command-line processing tool has been rewritten to use a more
flexible implementation technique.  In the process some erroneous
situations that weren't detected before are now detected.

@findex positional parameters
Most notably, in previous versions when a positional parameter was
specified no usage message was printed if the user did not provide a
value for the parameter.  This has been fixed.

@findex repeated boolean options
Repeated boolean options are now a count of the number of times the
option appears rather than a list of keys each of which have the value
1.  This is a potential source of incompatibility with previous
versions.

The new version also provides some new features, described in the
following paragraphs.

@findex value options with or without spacing
Previously it was possible to have an integer or string value that was
either the next argument or was joined to the option string.  I.e., the
following were possible

@example
-#23
-m foo
@end example

It is now possible to have an option where the value can be either the
next argument or can be joined to the option string.  This is indicated
by the keyword "with".

@example
MacroPackage "-m" with strings "Load this macro package";
NumCols "-C" with int "Use this many colours";
NumZaps "-z" with ints "Zap this many times";
@end example

@findex multiple option strings
It is now possible to have more than one option string that invokes a
particular option.  Just list more than one string.

@example
MacroPackage "-m" "mac" with strings "Load this macro package";
NumZaps "-z" "-Zap" "whammo" ints "Zap this many times";
@end example

@findex empty .clp files
Empty .clp files are now acceptable.  The resulting processor will
accept standard input, but nothing on the command line.

@node Monitoring, Unparsing, Clp, top
@chapter Monitoring
@findex Monitoring
@findex Noosa

The Noosa system (invoked using the @code{:mon} product has undergone
some major changes since the last release of Eli.  Numerous small
changes have been made to the user interface but the general appearance
is the same. 

@findex fonts in Noosa
The default font is not specified by Noosa any more.  You now get
whatever your Tk setup gives you by default, but you can set it yourself
using the Noosa*Font resource in your .Xdefaults.  More support for
resources will be provided in future releases.

@findex abstract syntax tree display
The previous version displayed the complete abstract syntax tree drawn
in a conventional fashion.  The new version also includes a tree display
that allows a partial view of the tree and takes up much less space.  It
is designed for browsing of the tree and nodes can be selectively
opened and closed.  You can select which of the kinds of tree display
you want using the Abstract Tree item in the Windows menu.

@findex attribute value display
Eli and Noosa now have support for attribution monitoring so the nodes
in the tree displays provide access to the node attributes.  You can
elect to see the values of attributes; they are displayed in the
transcript window when next computed.  Optionally you can also make the
program stop when the value of an attribute is computed (a form of
breakpoint). 

@findex editing files while monitoring
The Windows menu has a new entry called Files.  This brings up a window
from which it is possible to display and edit files while you are
monitoring (e.g., to fix bugs in your specs or to alter the process
input).  The Open menu item in the Noosa menu is no longer provided
since its functionality is subsumed by the new window type.  You can
have as many file windows as you like.  They support emacs-style key
bindings and support searching.

@findex browsing attribute values
Sensitive areas in the transcript are now always underlined and you just
have to click on them with B1 (a'la netscape) to "open" them.  What
"opening" means depends on the kind of value.  In the current version
the sensitive areas are coordinates (or coordinate ranges), abstract
tree nodes (Nodes), and pattern-based text generator nodes (PTGNodes).
Opening a coordinate (or range) highlights that coordinate (or range) in
the input window.  Opening an abstract tree node highlights the node in
an abstract tree window (if there are any).  Opening a PTGNode causes
the text expansion of that node to be printed at the bottom of the
transcript window.  Future versions of Noosa will support opening other
types of values such as environments and definition table keys.

In this version of Eli the :mondbx and :mongdb products are not
operational due to the new Noosa implementation.  This situation will
be remedied as soon as possible with the fixes being made available
via an Eli patch.

@node Unparsing, FunnelWeb, Monitoring, top
@chapter Abstract Syntax Tree Unparsing

@findex @code{idem}
@findex @code{tree}
@findex unparser generation
@dfn{Parsing} is the process of constructing a tree from a string of
characters; @dfn{unparsing} is the reverse: constructing a string of
characters from a tree.
An Eli user can specify an arbitrary unparser by means of a combination
of attribute computations and PTG
(@pxref{Top,,,ptg,PTG: Pattern-Based Text Generator})
templates.
For a large tree, this can be a tedious process.

Given a specification of the set of rules defining the tree,
Eli can now generate the combinations of attribute computations and PTG
templates needed to produce certain common unparsings.
This information can be extracted and modified, or it can be automatically 
merged with the remainder of the specification to produce the output
routines for the generated processor.

See @ref{Top, , , idem, Abstract Syntax Tree Unparsing}, for details.

@node FunnelWeb, Miscellaneous, Unparsing, top
@chapter FunnelWeb Output Specification

@findex non-product output files
@findex files, non-product
@findex FunnelWeb files
A @dfn{non-product} output file, named by @code{@@N}, is now available.
A non-product output file is identical to a normal output file except that 
it is not included in the set of files making up the final product
specification.

Non-product files are files that are used in the derivation of
product components, but are not themselves components of the product.
For example, consider the problem of making keywords case-insensitive but
retaining case sensitivity in identifiers
(@pxref{Keywords, , Making Literal Symbols Case Insensitive, lex,
Lexical Analysis}).
Here is a portion of a FunnelWeb file implementing such a processor:

@example
@@O@@<nolit.gla@@>==@@@{
identifier: C_IDENTIFIER
@@@}

@@N@@<keyword.gla@@>==@@@{
$[a-z]+
@@@}

@@O@@<keyword.specs@@>==@@@{
keyword.gla :kwd
@@@}
@end example

Note that the file @file{keyword.gla} can @emph{not} form part of the final
product specification.
If it did, the specified processor would treat all completely lower case
identifiers as comments!
Nevertheless, file @file{keyword.gla} is necessary to specify the
representation of the keywords in the @emph{grammar} so that they can be
extracted and processed separately
(@pxref{Keywords, , Making Literal Symbols Case Insensitive, lex,
Lexical Analysis}).
Thus file @file{keyword.gla} is defined as a non-product file by using
@code{@@N} instead of @code{@@O} when specifying its name and content.

@node Miscellaneous, Index, FunnelWeb, top
@chapter Miscellaneous

@menu
* Profile Support dropped::     
* New Specification file-type eta::  
@end menu

@node Profile Support dropped, New Specification file-type eta, Miscellaneous, Miscellaneous
@section Profile Support dropped

Support of Profiling in Eli had included only the definition of the commandline-switch
when calling the C-Compiler. The documentation on profiling-Support in Eli was incomplete
in large parts.

Since it is not possible, to automatically determine the correct commandline-switches
for support of profiling in the C-Compiler, the support of profiling was dropped int the
current version of Eli. If you need to use profiling, substitute the @code{+prof}-derivation
option with @code{+define='-pg'}. For further information on the profiling-support that
is built into Odin, refer to the odin reference manual available from 
@code{ftp://ftp.cs.colorado.edu/pub/odin}.

@node New Specification file-type eta, , Profile Support dropped, Miscellaneous
@comment  node-name,  next,  previous,  up
@section New Specification file-type eta

The type-@file{.eta}-files serve to assemble include-files just as the @file{.phi}-files.
While the @file{.phi}-files can be used only, to introduce code into a @file{.c} or 
@file{.h}-file, the @file{.eta}-files assemble an include-file that can be used 
throughout the whole specification. 

For a description of this file-type, see @ref{Specifications, , Descriptive Mechanisms Known to Eli, novice, Guide for New Eli Users}.

@node Index,  , Miscellaneous, top
@unnumbered Index
@printindex fn

@contents
@bye

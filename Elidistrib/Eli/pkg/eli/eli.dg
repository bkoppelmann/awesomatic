# $Id: eli.dg,v 2.40 2013/03/31 00:52:32 profw Exp $
# Copyright 1994, The Regents of the University of Colorado

# This file is part of the Eli translator construction system.

# Eli is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version.

# Eli is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

# You should have received a copy of the GNU General Public License along
# with Eli; see the file COPYING.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

$elipkg 'Location of packages' = ( $ODINCACHE/PKGS );

*.specs => :specs;
:specs 'Set of specifications defining the desired processor'? => <:sp>;

EXEC (spfils.sh) (:specs :dir)@ (.) (:specs) spfils
  NEEDS (:specs :incl.all)
  => (:spfils);
:spfils 'Set of specifications after pre-processing' => :FILE;

:SpecList 'List of specifications' => :LIST;

UNION (:spfils :list :map=:expandlist)
  => (:level_0_specs_out);
:level_0_specs_out 'Base of a derivation to a complete program' => :level_0_specs;
:level_0_specs 'Base of a derivation to a complete program' => :SpecList;

COLLECT (:level_0_specs) (:level_0_specs :fwOut :list :map=:expandlist)
  => (:fwspecs);
:fwspecs 'Specifications generated by FunnelWeb' => :LIST;

COLLECT (:fwspecs)
        (:fwspecs :extract=:specs :map=:specs_closure)
  => (:specs_closure);
:specs_closure 'Closure on specs' => :LIST;

UNION (:specs_closure :map=:expandlist)
  => (:expfwspecs);
:expfwspecs 'Specifications generated by Funnelweb expanded' => :LIST;

COLLECT (:expfwspecs) 
  => (:allspecs_in);
:allspecs_in 'Intermediate for allspecs union' => :LIST;
UNION (:allspecs_in :map=:expandlist)
  => (:allspecs);
:allspecs 'All specification files'? => :SpecList;

COLLECT (:allspecs)
  => (:level_1_specs_in);
:level_1_specs_in 'Intermediate for Level 1 union' => :LIST;
UNION (:level_1_specs_in :map=:expandlist)
  => (:level_1_specs);
:level_1_specs 'Level 1 specifications' => :SpecList;

COLLECT (:level_1_specs) 
  => (:level_2_specs_in);
:level_2_specs_in 'Intermediate for Level 2 union' => :LIST;
UNION (:level_2_specs_in :map=:expandlist)
  => (:level_2_specs);
:level_2_specs 'Level 2 specifications' => :SpecList;

COLLECT (:level_2_specs)
  => (:level_3_specs_in);
:level_3_specs_in 'Intermediate for Level 3 union' => :LIST;
UNION (:level_3_specs_in :map=:expandlist)
  => (:level_3_specs);
:level_3_specs 'Level 3 specifications' => :SpecList;

COLLECT (:level_3_specs) 
  => (:level_4_specs_in);
:level_4_specs_in 'Intermediate for Level 4 union' => :LIST;
UNION (:level_4_specs_in :map=:expandlist)
  => (:level_4_specs);
:level_4_specs 'Level 4 specifications' => :SpecList;

COLLECT (:level_4_specs) 
  => (:level_5_specs_in);
:level_5_specs_in 'Intermediate for Level 5 union' => :LIST;
UNION (:level_5_specs_in :map=:expandlist)
  => (:level_5_specs);
:level_5_specs 'Level 5 specifications' => :SpecList;

COLLECT (:level_5_specs) 
  => (:level_6_specs_in);
:level_6_specs_in 'Intermediate for Level 6 union' => :LIST;
UNION (:level_6_specs_in :map=:expandlist)
  => (:level_6_specs);
:level_6_specs 'Level 6 specifications' => :SpecList;

COLLECT (:level_6_specs :delete=:lex_code) 
  => (:level_7_specs_in);
:level_7_specs_in 'Intermediate for Level 7 union' => :LIST;
UNION (:level_7_specs_in :map=:expandlist)
  => (:level_7_specs);
:level_7_specs 'Level 6 specifications' => :SpecList;

COLLECT (:level_7_specs)
  => (:level_8_specs_in);
:level_8_specs_in 'Intermediate for Level 8 union' => :LIST;
UNION (:level_8_specs_in :map=:expandlist)
  => (:level_8_specs);
:level_8_specs 'Level 8 specifications' => :SpecList;

COLLECT (:level_8_specs :delete=:eta_h) 
  => (:level_9_specs_in);
:level_9_specs_in 'Intermediate for Level 9 union' => :LIST;
UNION (:level_9_specs_in :map=:expandlist)
  => (:level_9_specs);
:level_9_specs 'Level 9 specifications' => :SpecList;

COLLECT (:level_9_specs) (:genlib)
  => (:phiCollection);
:phiCollection 'Intermediate for union' => :LIST;
UNION (:phiCollection :map=:expandlist)
  => (:phiInSpecs);
:phiInSpecs 'Collection of user specs and reqmod specs' => :LIST;
COLLECT (:phiInSpecs :phiOut :list) (:phiInSpecs :etaOut :list)
  => (:phiGenHeaders);
:phiGenHeaders 'List of headers generated by phi' => :LIST;

EXEC (definition.sh) (:spfils :list :depend :ls)
  NEEDS (:spfils :list :depend)
  => (:definition);
:definition 'Original specification files'? => :FILE;

COLLECT (:level_9_specs :extract=:c)
    (:level_9_specs :extract=:cxx)
  => (:all_c);
:all_c 'All C files arising from the specification' => :LIST;

EXEC (includes.sh) (:level_9_specs :extract=:h :pasted)
     (:genlib :extract=:h :pasted)
     (:phiGenHeaders :pasted)
  => (:dothlist);
:dothlist 'Header files from the specifications and frame' => :FILE;

COLLECT (:level_9_specs :delete=:a :delete=:o)
    (:genlib :extract=:c)
    (:genlib :extract=:h)
    (:phiGenHeaders)
  => (:gencode_in);
:gencode_in 'Intermediate for union' => :LIST;
UNION (:gencode_in :map=:expandlist)
  => (:gencode);
:gencode 'Generated source code'? => :LIST;

*.reqmod => :reqmod;
:reqmod 'Names of required modules'? => <:sp>;

:sp 'specs or reqmod' => :FILE;

EXEC (spfils.sh) (:sp :dir)@ (.) (:sp) reqfils
  NEEDS (:sp :incl.all)
  => (:reqfils);
:reqfils 'Set of required modules after pre-processing' => :FILE;

UNION (:reqfils :list)
  => (:reqlist);
:reqlist 'Base of a derivation of required modules' => :LIST;

COLLECT (:reqlist) (:reqlist :fwOut :list :map=:expandlist)
  => (:libmods_fw);
:libmods_fw 'Specifications generated by FunnelWeb' => :LIST;

COLLECT (:libmods_fw)
        (:libmods_fw :extract=:sp :map=:libmods)
  => (:libmods);
:libmods 'Closure on sp' => :LIST;

COLLECT (:level_9_specs :extract=:reqmod) (eli.reqmod)
  => (:reqmods);
:reqmods 'All reqmod files' => :LIST;

UNION (:reqmods :map=:libmods :union :map=:expandlist)
  => (:genlist);
:genlist 'List of all frame modules' => :LIST;
EXEC (filter.sh) (:genlist :pasted) (:level_9_specs :labels)
  => (:framespecs);
:framespecs 'List of frame modules not overridden' => :FILE;
READ-LIST (:framespecs) => (:genlib);
:genlib 'Library modules included implicitly' => <:allspecs>;

*.reqsym => :reqsym;
:reqsym 'Entry point symbols of required modules'? => :FILE;

EXEC (used.sh) (loaded.exe) (main.reqsym)
    (:all_c
      +incl=(:dothlist) :map=:lookup_c_srcs
      :union :map=:o :ls)
    (:all_c :names)
    (:genlib :extract=:c
      +incl=(:dothlist) :map=:lookup_c_srcs
      :union :map=:o :ls)
    (:genlib :extract=:c :names)
    (:LIST :extract=:reqsym :cat)
    (:genlib :extract=:reqsym :cat)
    (+debug) (+prof) (+nomain) (+monitor)
    (+cc)
  NEEDS
    (:all_c
      +incl=(:dothlist) :map=:lookup_c_srcs
      :union :map=:o)
    (:genlib :extract=:c
      +incl=(:dothlist) :map=:lookup_c_srcs
      :union :map=:o)
  => (:used_sources) (:used_objects);
:used_sources 'Used source files' => :FILE;
:used_objects 'Used object files' => :FILE;
COLLECT (:used_sources :list) (:init_sources :list)
        ($ODINCACHE/PKGS/Adt/obstack.c)
  => (:srclist);
:srclist 'List of source files' => :LIST;
UNION (:srclist)
  => (:sources);
:sources 'Source files' => :LIST;

UNION (:sources +incl=(:dothlist) :map=:incl.all)
  => (:includes);
:includes 'Include files' => :LIST;

COLLECT (:used_objects :list)
        (:init_sources :list
          +incl=(:dothlist) :map=:lookup_c_srcs
          :union :map=:o)
  => (:objlist);
:objlist 'List of object files' => :LIST;
UNION (:objlist)
  => (:objects);
:objects 'Object files' => :LIST;
+nomain 'Do not supply a main program'? => :first;

COLLECT (:level_9_specs :extract=:a) (:genlib :extract=:a)
  => (:dotafiles);
:dotafiles 'Explicit libraries' => :LIST;

*.libs => :libs;
:libs 'Libraries to include in the link'? => :FILE;

COLLECT (:level_9_specs :extract=:libs) (:genlib :extract=:libs)
  => (:libsfiles);
:libsfiles 'Collection of all of the libs files' => :LIST;

CONCATENATE (:libsfiles :cpp :list :cat)
  => (:libsflags);
:libsflags 'The complete set of linker flags to use' => :FILE;

EXEC (exe.sh) (.) (:objects :dir_of :vir_dir)
    (:libsflags)
    (:library_flags)
    (:dotafiles :dir_of :vir_dir)
    (:dotafiles :labels)
    (+debug) (+prof) (+cc) (+cc_flags)
  NEEDS (:objects) (:level_9_specs :extract=:a)
  => (:exe);
:exe 'Executable program'? => :FILE;

EXEC (so.sh) (:objects :dir_of :vir_dir)
    (+debug) (+cc) (+cc_flags)
  NEEDS (:objects)
  => (:so);
:so 'Shared library'? => :FILE;

COLLECT (:mkfile :list)
        (:sources)
        (:sources +incl=(:dothlist) :map=:incl.all :union)
  => (:source);
:source 'Source and include files for the complete program'? => :LIST;

EXEC (mkfile.sh) (+cc) (+cc_flags) (+debug) (+prof) (+define) (+monitor)
  (:label) (:sources +incl=(:dothlist) :map=:dep :cat)
  (:libsflags) (:library_flags) (:dotafiles :ls)
  => (:mkfile);
:mkfile 'Makefile for the complete program' => :DERIVED-DIRECTORY;

:dep 'Dependence line for a program' => :FILE;

EXEC (c_dep.sh) (.) (:c :label) (:c :incl.all :labels) c_dep
  => (:c_dep);
:c_dep 'Dependence line for a C program' => :dep;

EXEC (c_dep.sh) (.) (:cxx :label) (:cxx :incl.all :labels) cxx_dep
   => (:cxx_dep);
:cxx_dep 'Dependence line for a C++ program' => :dep;

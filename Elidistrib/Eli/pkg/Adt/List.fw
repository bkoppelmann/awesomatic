@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: List.fw,v 3.11 1999/11/17 14:22:59 uwe Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements linear lists whose elements are of type |TYPE|.
The list type is |TYPE|List.

This header file defines all of the exported operations of the module.
It must be included in any C file that refers to those operations.

~O~<|TYPE|List.specs~>~{
$/Adt/obstack.specs
#define EMPTY|HDR|HDR
#ifdef EMPTYHDR
$/Adt/FunctionTypes.gnrc +instance=|TYPE| :inst
#else
$/Adt/FunctionTypes.gnrc +instance=|TYPE| +referto=|HDR| :inst
#endif
#undef EMPTY|HDR|HDR
$/Input/err.specs
~}

~O~<|TYPE|List.h~>~{
#ifndef _|TYPE|LIST_H
#define _|TYPE|LIST_H

/* include header file defining |TYPE| if |HDR| is set: */
#define EMPTY|HDR|HDR
#ifndef EMPTYHDR
#include "|HDR|.h"
#endif
#undef EMPTY|HDR|HDR

#include "|TYPE|FunctionTypes.h"

typedef struct _|TYPE|LE *|TYPE|List;
typedef |TYPE|List    *|TYPE|ListPtr;

struct _|TYPE|LE {
|TYPE|		head;
|TYPE|List	tail;
};

#define NULL|TYPE|List		((|TYPE|List)0)
#define Null|TYPE|List()	((|TYPE|List)0)
#define Single|TYPE|List(e)	(Cons|TYPE|List((e),NULL|TYPE|List))

#if defined(__STDC__) || defined(__cplusplus)

extern void Finl|TYPE|List(void);
   /* Deallocates all |TYPE|Lists. */
   /* Dynamic storage is allocated on first need */

extern |TYPE|List Cons|TYPE|List (|TYPE| e, |TYPE|List l);
   /* Constructs a |TYPE|List of an element e and a given tail l.
    * e is the first element of the list. */

extern |TYPE| Head|TYPE|List (|TYPE|List l);
   /* Returns the first element of the list l.
    * The list l must not be empty. */

extern |TYPE|List Tail|TYPE|List (|TYPE|List l);
   /* Returns the tail of the list l.
    * If l is empty, an empty list is returned. */

extern int Length|TYPE|List (|TYPE|List l);
   /* Returns the number of elements in the list l. */

extern |TYPE| IthElem|TYPE|List (|TYPE|List l, int i);
   /* Returns the i-th element of the List l. The head of l
    * is referred to as 1. If the value of
    * i is greater than the length of the list, an error
    * is reported and the program exits.
    */

extern |TYPE|List Copy|TYPE|List (|TYPE|List l, |TYPE|MapFct cp);
   /* Copies the list l. Elements are copied by calls of cp. */

extern |TYPE|List App|TYPE|List (|TYPE|List l1, |TYPE|List l2);
   /* Concatenates two lists l1 and l2. The resulting list contains l2 at
    * the end of a copy of list l1. */

extern |TYPE|List AppEl|TYPE|List (|TYPE|List l, |TYPE| e);
   /* Appends an element e to the list l.
    * The list l is not copied, it is modified as a side-effect
    * of this function. */

extern void InsertAfter|TYPE|List (|TYPE|List l, |TYPE| e);
   /* This function requires a non-empty list l. The element e is inserted
    * just after the first element of l. 
    * The list l is modified as a side-effect of this function. */

extern |TYPE|List OrderedInsert|TYPE|List (|TYPE|List l, |TYPE| e, |TYPE|CmpFctType fcmp);
   /* Inserts the element e into the list l maintaining l in
    * ascending order with respect to the compare fcmp. 
    * The list l is modified as a side-effect of this function. */

extern |TYPE|ListPtr RefEndCons|TYPE|List (|TYPE|ListPtr addr, |TYPE| e);
   /* Appends an element e to the end of a list given by its address addr.
    * The address where the next element may be appended is returned.
    * The list is modified as a side-effect of this function. */

extern |TYPE|ListPtr RefEndApp|TYPE|List (|TYPE|ListPtr addr, |TYPE|List l);
   /* Appends a list l to the end of a list given by its address addr.
    * The address where the next element may be appended is returned.
    * The list is modified as a side-effect of this function. */

extern int ElemIn|TYPE|List (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType cmpfct);
   /* This function returns true (1) iff the element e is in the List l.
    * List elements are compared by the function cmpfct. */

extern |TYPE|List AddToSet|TYPE|List (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType cmpfct);
   /* A list is returned that has e as an element.
    * l is checked whether it already contains e using the compare
    * function cmpfct. */

extern |TYPE|List AddToOrderedSet|TYPE|List 
       (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType cmpfct);
   /* A list is returned that has e as an element.
    * l is checked whether it already contains e using the compare
    * function cmpfct. l is assumed to be ordered increasingly in the sense of
    * cmpfct. */

extern |TYPE|List Map|TYPE|List (|TYPE|List l, |TYPE|MapFct f);
   /* Returns a new |TYPE|List obtained by applying f to each element of l. */

extern int Comp|TYPE|List (|TYPE|List l1, |TYPE|List l2, |TYPE|CmpFctType f);
   /* Compares the lists l1 and l2 lexicographically by applying f
    * to the corresponding elements. */

extern |TYPE| Sum|TYPE|List (|TYPE|List l, |TYPE|SumFct f, |TYPE| a);
   /* Applies the binary function f to the elements of the List:
    *   f( f(... f(a, e1), e2, ...), en)
    * If l is empty a is returned. */

#else

extern void Finl|TYPE|List ();
extern |TYPE|List Cons|TYPE|List ();
extern |TYPE| Head|TYPE|List ();
extern |TYPE|List Tail|TYPE|List ();
extern int Length|TYPE|List ();
extern |TYPE| IthElem|TYPE|List ();
extern |TYPE|List Copy|TYPE|List ();
extern |TYPE|List App|TYPE|List ();
extern |TYPE|List AppEl|TYPE|List ();
extern void InsertAfter|TYPE|List ();
extern |TYPE|List OrderedInsert|TYPE|List ();
extern |TYPE|ListPtr RefEndCons|TYPE|List ();
extern |TYPE|ListPtr RefEndApp|TYPE|List ();
extern int ElemIn|TYPE|List ();
extern |TYPE|List AddToSet|TYPE|List ();
extern |TYPE|List Map|TYPE|List ();
extern int Comp|TYPE|List ();
extern |TYPE| Sum|TYPE|List ();

#endif

#ifdef MONITOR
#define DAPTO_RESULT|TYPE|List(l) DAPTO_RESULT_PTR(l)
#define DAPTO_ARG|TYPE|List(l)    DAPTO_ARG_PTR (l, |TYPE|List)
#endif

#endif
~}

This file implements the operations on lists.
It will be added to the set of components of the generated program
automatically.

~O~<|TYPE|List.c~>~{

#include "|TYPE|List.h"
#include "err.h"
#include "obstack.h"

typedef struct {
  Obstack space;
  void *baseptr;
} Dyn, *DynP;

static DynP |TYPE|ListSpace = (DynP)0;

#if defined(__STDC__) || defined(__cplusplus)
void Finl|TYPE|List (void)
#else
void Finl|TYPE|List ()
#endif
{
    if (|TYPE|ListSpace != (DynP)0)
    {  obstack_free(&(|TYPE|ListSpace->space), |TYPE|ListSpace->baseptr);
       |TYPE|ListSpace->baseptr = obstack_alloc(&(|TYPE|ListSpace->space), 0);
    }
}/* Finl|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List Cons|TYPE|List (|TYPE| e, |TYPE|List l)
#else
|TYPE|List Cons|TYPE|List (e, l)
	|TYPE|	e;
	|TYPE|List	l;
#endif
{
    |TYPE|List	h;

    if (|TYPE|ListSpace == (DynP)0)
    {	|TYPE|ListSpace = (DynP) malloc (sizeof(Dyn));
	if (|TYPE|ListSpace == (DynP)0)
	{  message (DEADLY, "no space for |TYPE|List", 0, (POSITION*)0);
	   exit (1);
	}
	obstack_init(&(|TYPE|ListSpace->space));
	|TYPE|ListSpace->baseptr =
		obstack_alloc(&(|TYPE|ListSpace->space), 0);
    }

    h = (|TYPE|List)obstack_alloc(&(|TYPE|ListSpace->space),
    				  sizeof (struct _|TYPE|LE));
    h->head = e;
    h->tail= l;
    return (h);
}/* Cons|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE| Head|TYPE|List (|TYPE|List l)
#else
|TYPE| Head|TYPE|List (l)
	|TYPE|List	l;
#endif
{
    if (l == NULL|TYPE|List)
    {
	message (DEADLY, "Head|TYPE|List: empty list", 0, (POSITION*)0);
	/* return ((|TYPE|)0); */
    } /* if */
    return (l->head);
}/* Head|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List Tail|TYPE|List (|TYPE|List l)
#else
|TYPE|List Tail|TYPE|List (l)
	|TYPE|List	l;
#endif
{
    return ((l==NULL|TYPE|List) ? NULL|TYPE|List : l->tail);
}/* Tail|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
int Length|TYPE|List (|TYPE|List l)
#else
int Length|TYPE|List (l)
	|TYPE|List	l;
#endif
{
    int	res = 0;

    for (; l; l = l->tail)
	res++;
    return (res);
}/* Length|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE| IthElem|TYPE|List (|TYPE|List l, int i)
#else
|TYPE| IthElem|TYPE|List (l, i)
	|TYPE|List	l;
	int	i;
#endif
{
    while ((i>1) && l)
    {
	i--;
	l = l->tail;
    }

    if ((i<=0) || (l==NULL|TYPE|List))
	message (DEADLY, "IthElem|TYPE|List: no such element",
		 0, (POSITION*)0);
    return (l->head);
}/* Ith|TYPE|List */


#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List Copy|TYPE|List (|TYPE|List l, |TYPE|MapFct cp)
#else
|TYPE|List Copy|TYPE|List (l, cp)
	|TYPE|List l;
	|TYPE|MapFct	cp;
#endif
{
    |TYPE|List NewList=NULL|TYPE|List, *addr = &NewList;

    while (l)
    {
	(*addr) = Cons|TYPE|List (cp (l->head), NULL|TYPE|List);
	addr = &((*addr)->tail);
	l = l->tail;
    }
    return (NewList);
}/* Copy|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List App|TYPE|List (|TYPE|List l1, |TYPE|List l2)
#else
|TYPE|List App|TYPE|List (l1, l2)
	|TYPE|List	l1, l2;
#endif
{
    |TYPE|List	NewList;
    |TYPE|List	*addr = &NewList;

    if (!l1) return (l2);
    if (!l2) return (l1);

    while (l1) {
	(*addr) = Cons|TYPE|List (l1->head, NULL|TYPE|List);
	addr = &((*addr)->tail);
	l1 = l1->tail;
    }
    (*addr) = l2;

    return (NewList);
}/* App|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List AppEl|TYPE|List (|TYPE|List l, |TYPE| e)
#else
|TYPE|List AppEl|TYPE|List (l, e)
	|TYPE|List	l;
	|TYPE|	e;
#endif
{
    |TYPE|List	res = l;
    if (!l)
	return (Cons|TYPE|List (e, NULL|TYPE|List));

    while (l->tail)
	l = l->tail;
    l->tail = Cons|TYPE|List (e, NULL|TYPE|List);

    return (res);
} /* AppEl|TYPE|List */


#if defined(__STDC__) || defined(__cplusplus)
void InsertAfter|TYPE|List (|TYPE|List l, |TYPE| e)
#else
void InsertAfter|TYPE|List (l, e)
	|TYPE|List	l;
	|TYPE|	e;
#endif
{
    if (!l)
	message (DEADLY, "InsertAfter|TYPE|List: null list", 0, (POSITION*)0);
    else
	l->tail = Cons|TYPE|List (e, l->tail);
}/* InsertAfter|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List OrderedInsert|TYPE|List (|TYPE|List l, |TYPE| e, |TYPE|CmpFctType fcmp)
#else
|TYPE|List OrderedInsert|TYPE|List (l, e, fcmp)
	|TYPE|List	l;
	|TYPE|	e;
	|TYPE|CmpFctType fcmp;
#endif
{
    |TYPE|List	p;
    if (!l)
	return (Cons|TYPE|List (e, NULL|TYPE|List));
    if (fcmp (e, l->head) <= 0)
	return (Cons|TYPE|List (e, l));
    p = l;
    while (p->tail && (fcmp (e, p->tail->head) > 0))
	p = p->tail;
    p->tail = Cons|TYPE|List (e, p->tail);
    return (l);
}/* OrderedInsert|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|ListPtr RefEndCons|TYPE|List (|TYPE|ListPtr addr, |TYPE| e)
#else
|TYPE|ListPtr RefEndCons|TYPE|List (addr, e)
	|TYPE|ListPtr	addr;
	|TYPE|		e;
#endif
{
    if (!addr)
    {
	message (DEADLY, "RefEndCons|TYPE|List: no |TYPE|List ref",
		 0, (POSITION*)0);
	return (addr);
    }
    (*addr) = Cons|TYPE|List (e, NULL|TYPE|List);
    return (&((*addr)->tail));
}/* RefEndCons|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|ListPtr RefEndApp|TYPE|List (|TYPE|ListPtr addr, |TYPE|List l)
#else
|TYPE|ListPtr RefEndApp|TYPE|List (addr, l)
	|TYPE|ListPtr	addr;
	|TYPE|List		l;
#endif
{
    if (!addr) {
	message (DEADLY, "RefEndApp|TYPE|List: no |TYPE|List ref",
		 0, (POSITION*)0);
	return (addr);
    }
    if (!l)
	return addr;

    (*addr) = l;

    while (l->tail)
	l = l->tail;
    return (&(l->tail));
}/* RefEndApp|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
int ElemIn|TYPE|List (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType fcmp)
#else
int ElemIn|TYPE|List (e, l, fcmp)
	|TYPE|	e;
	|TYPE|List	l;
	|TYPE|CmpFctType	fcmp;
#endif
{
    while (l != NULL|TYPE|List) {
	if (fcmp (e, l->head) == 0)
	    return (1);
	l = l->tail;
    }
    return (0);
}/* ElemIn|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List AddToSet|TYPE|List (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType fcmp)
#else
|TYPE|List AddToSet|TYPE|List (e, l, fcmp)
	|TYPE|	e;
	|TYPE|List	l;
	|TYPE|CmpFctType	fcmp;
#endif
{
    if (ElemIn|TYPE|List (e, l, fcmp))
	return (l);
    else
	return (Cons|TYPE|List (e, l));
}/* AddToSet|TYPE|List */


#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List AddToOrderedSet|TYPE|List (|TYPE| e, |TYPE|List l, |TYPE|CmpFctType fcmp)
#else
|TYPE|List AddToOrderedSet|TYPE|List (e, l, fcmp)
        |TYPE|  e;
        |TYPE|List      l;
        |TYPE|CmpFctType fcmp;
#endif
{   int test;
    |TYPE|List  p;
    if (!l)
        return (Cons|TYPE|List (e, NULL|TYPE|List));
    if ((test = fcmp (e, l->head)) < 0)
        return (Cons|TYPE|List (e, l));
    if (test == 0) return l;
    p = l;
    while (p->tail && ((test = fcmp (e, p->tail->head)) > 0))
        p = p->tail;
    if (test) p->tail = Cons|TYPE|List (e, p->tail);
    return (l);
}/* AddToOrderedSet|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE|List Map|TYPE|List (|TYPE|List l, |TYPE|MapFct f)
#else
|TYPE|List Map|TYPE|List (l, f)
	|TYPE|List	l;
        |TYPE|MapFct f;
#endif
{
    |TYPE|List NewList = NULL|TYPE|List;
    |TYPE|List last = NULL|TYPE|List;

    while (l)
    {
	if (!NewList) {
	    NewList = Cons|TYPE|List ((f (l->head)), NULL|TYPE|List);
	    last = NewList;
	}
	else
	{
	    last->tail = Cons|TYPE|List ((f (l->head)), NULL|TYPE|List);
	    last = last->tail;
	}
	l = l->tail;
    }
    return (NewList);
}/* Map|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
int Comp|TYPE|List (|TYPE|List l1, |TYPE|List l2, |TYPE|CmpFctType fcmp)
#else
int Comp|TYPE|List (l1, l2, fcmp)
	|TYPE|List	l1, l2;
	|TYPE|CmpFctType fcmp;
#endif
{
    int	res = 0;
    while (l1 && l2 && (res == 0)) {
	res = (fcmp (l1->head, l2->head));
	l1 = l1->tail;
	l2 = l2->tail;
    }
    if (l1 && !l2)
	return (1);
    if (!l1 && l2)
	return (-1);
    return (res);
}/* Comp|TYPE|List */

#if defined(__STDC__) || defined(__cplusplus)
|TYPE| Sum|TYPE|List (|TYPE|List l, |TYPE|SumFct f, |TYPE| a)
#else
|TYPE| Sum|TYPE|List (l, f, a)
	|TYPE|List	l;
	|TYPE| ((*f) ());
	|TYPE|	a;
#endif
{
    while (l) {
	a = (f (a, l->head));
	l = l->tail;
    }
    return (a);
}/* Sum|TYPE|List */
~}

~O~<|TYPE|List.head~>~{
#include "|TYPE|List.h"
~}

~O~<|TYPE|List.dapto~>~{
aspect |TYPE|List;

"|TYPE|List.h"

operation get_|TYPE|List_elems
    "Return the |TYPE| list elements"
    (|TYPE|List lst "The list") : str
{
    |TYPE| elem;

    for ( ; lst != NULL|TYPE|List; lst = Tail|TYPE|List(lst)) {
	elem = Head|TYPE|List(lst);
	DAPTO_RESULT_PTR(elem);
    }
}

end;
~}

~O~<|TYPE|List.tcl~>~{
set n(|TYPE|List,desc) "|TYPE| List"

proc n_|TYPE|List_open {text lst} {
    n_say "$text\n"
    if {$lst == 0} {
        n_say "  NULL|TYPE|List\n"
    } else {
        set lst [n_hextodec $lst]
        set r [n_send get_|TYPE|List_elems $lst]
        set c 0
        foreach i $r {
            n_say "  "
            n_say_val |TYPE| $i
            n_say "\n"
            incr c
        }
        if {$c == 0} {
            n_say "  Empty\n"
        }
    }
}

proc n_|TYPE|List_say {lst} {
    n_say "|TYPE|List:0x[n_dectohex $lst]"
}
~}

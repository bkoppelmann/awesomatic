# $Id: phi.dg,v 1.8 1998/03/13 13:23:40 mjung Exp $
# Copyright 1995, Universitaet-Gesamthochschule Paderborn
#
# This file is part of the Eli translator construction system.
# 
# Eli is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version.
# 
# Eli is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License along
# with Eli; see the file COPYING.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

# Phi's inputs:

*.head => :head;
    :head 'Information to be prefaced to attribution modules'? => :FILE;

*.init => :init;
    :init 'Operations to be executed before starting'? => :FILE;

*.finl => :finl;
    :finl 'Operations to be executed after finishing'? => :FILE;

*.phi => :phi;
    :phi 'Files to be included at specified places in *.h and *.c-files'? => :FILE;

*.eta => :eta;
    :eta 'Files to be included at specified places in specification files'? => :FILE;

*.eta.h => :eta_h;
    :eta_h 'Header-files generated from Eta-Processing' => :h;

# Phi Processing

EXEC (phiOut.sh) (:LIST :extract=:head :ls) (:LIST :extract=:init :ls) 
                  (:LIST :extract=:finl :ls) (:LIST :extract=:phi :ls)
    NEEDS (:LIST :extract=:head) (:LIST :extract=:init) 
	  (:LIST :extract=:finl) (:LIST :extract=:phi)
  => (:phiOut) (:phiMap);
      :phiOut 'Include files for module intitiation/termination' 
	      => :DERIVED-DIRECTORY;
      :phiMap 'Mapping from output objects to Phi specification' => :FILE;

EXEC (phiErr.sh) (.) (+hookvalue) (:phiMap) (:phiOut :list :ls)
    (:phiOut :list :labels)
  => (:phiErr);
:phiErr 'Map line errors in Phi output' => :line_err;

# Eta Processing

EXEC (etaOut.sh) (:LIST :extract=:eta :ls)
    NEEDS (:LIST :extract=:eta)
  => (:etaOut) (:etaMap);
      :etaOut 'Include files for module specialization'
	      => :DERIVED-DIRECTORY;
      :etaMap 'Mapping from output objects to eta specification' => :FILE;      

EXEC (etaIncl.sh) (:allspecs :etaOut :direlms :pasted)
  => (:etaIncl);
      :etaIncl 'List of generated Eta-Header-Files that can be included by other Tools'
               => :FILE;

COLLECT (:expfwspecs :etaOut :list :map=:expandlist)
  => (:eli*allspecs_in);
  
EXEC (etaErr.sh) (.) (+hookvalue) (:etaMap) (:etaOut :list :ls)
    (:etaOut :list :labels)
  => (:etaErr);
  :etaErr 'Map line errors in eta output' => :line_err;
  
 

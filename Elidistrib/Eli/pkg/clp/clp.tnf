\input texinfo @c -*-para-*-
@comment Copyright (c) 1994-1997, 2013 Anthony M. Sloane
@comment
@comment This file is part of the Eli translator construction system.
@comment 
@comment Eli is free software; you can redistribute it and/or modify it under
@comment the terms of the GNU General Public License as published by the Free
@comment Software Foundation; either version 2, or (at your option) any later
@comment version.
@comment 
@comment Eli is distributed in the hope that it will be useful, but WITHOUT ANY
@comment WARRANTY; without even the implied warranty of MERCHANTABILITY or
@comment FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@comment for more details.
@comment 
@comment You should have received a copy of the GNU General Public License along
@comment with Eli; see the file COPYING.  If not, write to the Free Software
@comment Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
@comment %**start of header
@setfilename clp
@settitle Command Line Processing
@setchapternewpage odd
@comment %**end of header

@titlepage
@center @titlefont{Command Line Processing}
@sp 1
@center $Revision: 1.27 $
@include mqorg.tnf
@end titlepage

@iftex
@finalout
@end iftex

@node top, Command line interface, (dir), (dir)

@ifinfo
$Revision: 1.27 $
@end ifinfo

A processor generated by Eli may need to interact with its environment
by way of the command line that invokes it.  This manual describes the
default behaviour and how you can perform more sophisticated command line 
processing.  We will refer to Eli's command line processing support as 
@emph{CLP}.

@menu
* Command line interface::      What is a command line interface?
* Default behaviour::           What happens in the default case?
* Specification::               Specifying the command line interface
* Accessing::                   Accessing the command line
* Grammar::                     Complete Grammar Listing
* Index::                       Index for this manual

 --- The Detailed Node Listing ---

Specifying the command line interface

* Command line format::         The general format of the command line
* Boolean options::             Options that are either there or not
* Value options::               Options that have a value given with them
* Joined value options::        Options that are joined to their values
* Multiple option strings::     Multiple option strings for the same option
* Ordering options::            The order of option specification lines
* Usage options::               Options that affect usage messages
* Termination::                 Terminating the option list
* Positional parameters::       Parameters given by their command line position
* Input parameters::            Parameters used for input files
* Documentation::               Documentation options and parameters

Accessing the command line

* Boolean option access::       Accessing boolean options
* Integer value options::       Accessing options with integer values
* String value options::        Accessing options with string values
* Repeated options::            Accessing options that appear more than once
* Positional parameter access::	Accessing positional parameters
* Input parameter access::	Accessing input parameters
* Reporting open errors::	Reporting open errors
@end menu

@node Command line interface, Default behaviour, top, top
@chapter What is a command line interface?

When a processor is invoked it will be from an interactive or batch
shell of some kind.  A command line
@findex command line
will be used to specify the name of the processor and any inputs that it
needs.  A few typical Unix command lines are:

@example
cc -o fred.exe fred.c
vi fred.c
rlogin prep.ai.mit.edu -l rms
@end example

Note that a pipe command such as:

@example
format doc.troff | lpr -Plaser
@end example
@noindent
consists of two command lines because two programs are invoked.

In these examples various options are given to some of the tools via the
command line.  For example, @code{-o fred.exe} specifies that the output
file of the C compilation should be called @code{fred.exe} rather than
the default @code{a.out}.  A major part of the job of a command line
interface is to provide mechanisms for specifying which options are
legal and allowing the processor to find out which ones the user
actually supplied.

Other information can be provided on the command line in the form of
@var{positional parameters}.
@findex positional parameters
For example, @code{fred.c} in the first two examples and
@code{prep.ai.mit.edu} in the last are positional parameters.  A
command line interface is also responsible for providing access to
positional parameters.

Unix provides access to the components of the command line for C
programs via the @code{argc} and @code{argv}
@findex argc
@findex argv
parameters to the @code{main} function.  The facility described in this
manual uses those parameters to provide higher-level access.

@node Default behaviour, Specification, Command line interface, top
@chapter What happens by default?

The default command line interface
@findex default interface
provided by Eli assumes that the generated processor will have one input
file and no options.

A processor @code{proc} generated with the default command line
interface can be invoked in the following ways:

@table @asis
@item @code{proc}
@var{No options or input files.}  Input is assumed to come from standard
input.
@findex standard input
@item @code{proc} @var{input}
@var{No options, one input file.}  Input comes from @var{input}.
@findex input file
@item @var{Any other way}
Signalled as an error.
@end table

The default behaviour is achieved using the following command line
specification:

@example
InputFile input "File to be processed";
@end example
@noindent
@pxref{Specification}, for details on the specification language.

@node Specification, Accessing, Default behaviour, top
@chapter Specifying the command line interface

If the default behaviour is not sufficient you can alter the command
line interface using a file whose extension is @code{.clp}.
@findex .clp
The following sections show how to specify the varieties of options that
the interface may need to handle.

@menu
* Command line format::         The general format of the command line
* Boolean options::             Options that are either there or not
* Value options::               Options that have a value given with them
* Joined value options::        Options that are joined to their values
* Multiple option strings::     Multiple option strings for the same option
* Ordering options::            The order of option specification lines
* Usage options::               Options that affect usage messages
* Termination::                 Terminating the option list
* Positional parameters::       Parameters given by their command line position
* Input parameters::            Parameters used for input files
* Documentation::               Documentation options and parameters
@end menu

@node Command line format, Boolean options, Specification, Specification
@section The general format of the command line

The general format 
@findex general format
@findex command line format
of a command line that can be recognised using a @code{.clp}
@findex .clp
specification is:

@enumerate
@item
The program name, followed by
@item
An arbitrary number of options, followed by
@item
An arbitrary number of positional parameters.
@end enumerate

A @code{.clp} specification describes the legal options and positional
parameters.

If the @code{.clp} specification is
@findex empty specification
empty
the effect is to prohibit all options and positional parameters.
A processor generated in this manner must get its input from
@findex standard input 
standard input.

@node Boolean options, Value options, Command line format, Specification
@section Options that are either there or not

@findex boolean option
A boolean option is something like the @code{-S} (produce assembly code)
or @code{-c} (compile only, don't link) options for the standard Unix
compilers.  That is, the option string is all that is needed.

A specification line of the form:

@display
@var{name} @var{string} @samp{boolean} @samp{;}
@end display
@noindent
describes a boolean option called @var{name} which is indicated by the
command line string @var{string}.  For example:
@findex boolean

@example
GenAssembly "-S" boolean;
CompileOnly "-c" boolean;
@end example
@noindent
describe the compiler options mentioned above.

If a boolean option can appear more than once on the command line you
@findex repeated options
should use the keyword @code{booleans} instead of @code{boolean}.
Thus, the specification line:
@findex booleans

@example
WideListing "-w" booleans;
@end example
@noindent
says that the user can give as many @code{-w} options as they like.  For
example, the processor can check the number provided and produce a
listing of the appropriate width.  (See the Berkeley Unix @code{ps}
command.)

@node Value options, Joined value options, Boolean options, Specification
@section Options that have a value given with them

@findex value options
Some options need values.  CLP supports two types of values: strings
@findex string values
and integers.
@findex integer values
Typical options of these types would be the @code{-o} (generate output
in the specified file) option of a Unix compiler, or the @code{-#}
(print this many copies) option of a line printing program.

A specification line of the form:

@display
@var{name} @var{string} @var{type} @samp{;}
@end display
@noindent
describes a value option called @var{name} which is indicated by the
command line string @var{string} and accepts values of the specified
type separated from the indication by whitespace.
@findex whitespace
The valid types are @code{int},
@findex int
@code{ints},
@findex ints
@code{string}
@findex string
and @code{strings}.
@findex strings
The plural versions denote value options that may
@findex repeated options
appear more than once on the command line.

For example:

@example
OutputFile "-o" string;
NumCopies "-#" int;
@end example
@noindent
describes the options mentioned above and

@example
Command "-e" strings;
@end example
@noindent
describes a repeatable option (see the Unix command @code{sed}, for
example).

@node Joined value options, Multiple option strings, Value options, Specification
@section Options that are joined to their values

Value options as described in the previous section are separated from
their values by white space.  If this is not desired, @var{joined} value
options
@findex joined value options
can be used and no white space will be expected.  Examples of joined
value options are @code{-} which is used by the Unix @code{head}
program to designate how many lines to print (eg. @code{head -42 file}),
and @code{-temp=} which is used by some compilers to describe where to
put temporary files (eg. @code{pc -temp=/usr/tmp file.p}).

To describe a joined value option, use the specification line as
described in the previous section with the keyword @code{joinedto}
@findex joinedto
before the type specifier.

For example, the following specification lines describe the options
mentioned above:

@example
TmpFile "-temp=" joinedto string;
NumLines "-" joinedto int;
@end example

Joined value options can be repeated in the same way as normal value
@findex repeated options
options.  For example,

@example
MacroPackage "-m" joinedto strings;
@end example

In some cases it is desirable to allow the option to be joined to its
value or to be separated from its value by whitespace.  To specify this
behaviour the keyword @code{with} can be used before the type specifier.
@findex with
@code{with} can also be used with repeated options of both integer and
string type.

For example, the following specification line describes an option
@code{-x} for which both of the following uses would be legal:

@example
-x42 -x 42
@end example

@example
Exit "-x" with int;
@end example

@node Multiple option strings, Ordering options, Joined value options, Specification
@section Multiple option strings for the same option

The previous three sections have described options with associated
values.  In some cases it is useful to be able to invoke these options
with more than one string on the command line.  To specify this kind of
behaviour just list all of the option strings instead of just one.
@findex multiple option strings

For example, the following specification line says that the printing
option can be invoked with any of the following: @code{-p}, @code{+pr},
or @code{--print}.

@example
Print "-p" "+pr" "--print" boolean "Print the output";
@end example

@node Ordering options, Usage options, Multiple option strings, Specification
@section The order of option specification lines 

@findex order of option specification lines
Care must be taken when writing a CLP specification to ensure that the
specification lines are ordered correctly.  When processing the command
line, CLP looks for options in the order that you specify them.  A
problem can occur if some option indication is a prefix of another
@findex prefixes
option indication specified later.

For example, the code generated from the specification:

@example
ModuleOption "-m" joinedto string;
ManOption "-man" string;
@end example
@noindent
will never recognize the @code{-man} option because @code{ModuleOption}
will be tested for first.  Putting the specification of @code{ManOption}
first will fix the problem.

@node Usage options, Termination, Ordering options, Specification
@section Options that affect usage messages

@findex usage message
CLP will automatically arrange for the usage message to be displayed
when an erroneous condition is discovered.  Sometimes it is nice to be
able to implement an option that the user can use on purpose to get the
usage message.

A specification line of the form:

@display
@samp{usage} @var{string} @samp{;}
@end display
@noindent
declares @var{string} to be such an option.  Multiple usage options are
allowed. 

If a usage option is specified on the command line by the user when
running the generated processor,
the usage message is displayed and execution is terminated.
All other options and/or parameters are ignored.

A report can be sent to the standard error stream if the program detects
some error in opening a file specified on the command line.
To send the report, the program calls
@findex ClpOpenError
@code{ClpOpenError} with two arguments
(@pxref{Reporting open errors}).

@findex error format 
@findex open error format
The text of the report is defined by writing a description of the form:

@display
@samp{open} @samp{error} @samp{format} @var{string} @samp{;}
@end display
@noindent
@var{String} defines the text, and may contain escape sequences
of the form @samp{%C} that are replaced before the report is output:

@table @code
@item %f
Replaced by the first argument of the @code{ClpFileError} call
(usually the name of the file that could not be opened).
@item %t
Replaced by the second argument of the @code{ClpFileError} call
(usually a string describing the system error).
@item %p
Replaced by the name of the program being executed.
@item %%
Replaced by a single @code{%}.
@item %C
Where @samp{C} is not @code{f}, @code{p}, @code{t}, or @code{%},
replaced by nothing.
@end table

A CLP specification may contain an arbitrary number of report definitions,
but only the last one encountered will be used.
CLP assumes that every specification begins with the following report
definition:

@display
open error format "%p cannot open %f: %t";
@end display

@findex open error usage
Sometimes it is useful to print the usage message when a file cannot be
opened.  For example, cases like this occur when the user mistypes an
option which is then interpreted as a filename.  By default, the usage
message is not printed when a file cannot be opened.  To cause it to be
printed, use a specification line of the form:

@display
@samp{open} @samp{error} @samp{usage} @samp{;}
@end display

@node Termination, Positional parameters, Usage options, Specification
@section Terminating the option list

@findex termination string
@findex stopping option recognition
For many processors it is useful to allow the user some way of saying
that a command line string that looks like an option isn't really one.
For example, this situation may arise when using the Unix @code{rm}
command.  If a user wants to remove a file called @code{-r} they would
rather not have the filename interpreted as an option to recursively
delete subdirectories.

One way of coping with this is to allow the user to type a special
command line string that causes option recognition to terminate.  For
example, a user could type:

@example
rm -i -- -r
@end example
@noindent
to interactively (@code{-i}) delete a file called @code{-r}.

The termination facility of CLP lets you specify which string (or
strings) should cause this behaviour.  A specification line of the form:
@findex terminator

@display
@samp{terminator} @var{string} @samp{;}
@end display
@noindent
declares @var{string} to be such a string.  Multiple terminator
specifications are allowed.

To get the behaviour described above for @code{rm} the following would
be used:

@example
terminator "--";
@end example

@node Positional parameters, Input parameters, Termination, Specification
@section Parameters given by their command line position

Parameters that are interpreted according to their position on the
command line are called @var{positional parameters}.
@findex positional parameters
For example, when invoking a remote login program the remote machine
name may be given as a positional parameter.

A specification line of the form:
@findex positional

@display
@var{name} @samp{positional} @samp{;}
@end display
@noindent
describes a situation where a positional parameter is to be
recognized and called @var{name}.

The plural form:
@findex positionals

@display
@var{name} @samp{positionals} @samp{;}
@end display
@noindent
can be used if a group of positional parameters is to be handled and
grouped together.

Multiple positional parameters can be recognized by giving multiple
specification lines of these kinds.  Parameters will be recognized in
the order that they are specified.  If a plural form is present, it should
be the last positional parameter specification line because it will represent
all of the positional parameters from that point on.
@findex order of specification lines
In that case, the processor generated will accept varying numbers of
parameters.  If no plural form is given, the processor will accept a
fixed number of parameters equal to the number of singular positional
parameter specification lines.

@node Input parameters, Documentation, Positional parameters, Specification
@section Input parameters

@findex input parameter
An input parameter is a special case of a positional parameter.
Its value must be a file name, and that file will replace standard input
as the primary source of data for the program.
An error will be reported if the named file cannot be opened for input.
Only one input parameter may be specified.

A specification line of the form:
@findex input

@display
@var{name} @samp{input} @samp{;}
@end display
@noindent
describes a situation where a positional parameter is to be recognized,
called @var{name}, and used as the primary source of data for the program.

If an input parameter is specified, but the user does not provide
a value for it on the command line, then
@findex standard input 
standard input is used as the primary source of data for the program.

If no input parameter is specified then the processor will not be able
to get input from a file (unless otherwise programmed using positional
parameters).
Standard input will be used as the primary source of data for the program.

@node Documentation,  , Input parameters, Specification
@section Documentation options and parameters

@findex documentation
@findex usage message
If the user specifies things incorrectly on the command line the usual
practice is to produce a usage message and terminate execution of the
processor.  CLP will automatically produce a usage message in this
fashion.  It is possible to attach descriptions to the option and
parameter specification lines to make this usage message more helpful to
the user.

Each of the types of specification lines described above (except those
for termination of option processing) can have a documentation string.
Typical examples are:

@example
CompileOnly "-c" boolean "Just compile, don't link";
MacroPackage "-m" joinedto strings "Load this macro package";
FileName input "File to be processed";
Others positionals "Other positional parameters";
@end example

@node Accessing, Grammar, Specification, top
@chapter Accessing the command line

A CLP specification is turned into code that arranges for command line
information to be stored in C variables or a simple database.  This code
is automatically run by the processor startup code generated by Eli.
During attribution of a structure tree you can access the variables or
use access functions to obtain the command-line information.

The header file @file{clp.h} will contain @code{extern} declarations for
all values defined by the CLP-generated code.  It should be included
wherever these values must be accessed.

@menu
* Boolean option access::       Accessing boolean options
* Integer value options::       Accessing options with integer values
* String value options::        Accessing options with string values
* Repeated options::            Accessing options that appear more than once
* Positional parameter access::	Accessing positional parameters
* Input parameter access::	Accessing input parameters
* Reporting open errors::	Reporting open errors
@end menu

@node Boolean option access, Integer value options, Accessing, Accessing
@section Accessing boolean options

Since boolean options do not have value information associated with
them, all that is needed to represent them is a simple flag rather than
a database object.  We store the flag as a C integer variable whose name
is the option name.

For example, given the specification:

@example
GenAssembly "-S" boolean;
@end example
@noindent
CLP will generate a variable called @code{GenAssembly}.  Typical C code
to test for this option would look like:

@example
if (GenAssembly)
  printf ("GenAssembly specified\n");
else
  printf ("GenAssembly not specified\n");
@end example

@node Integer value options, String value options, Boolean option access, Accessing
@section Accessing options with integer values

To provide access to integer value options, CLP generates a database
object which has the appropriate value as a property.  The object is
referred to by a key-valued variable named after the option.  For
example, given the specification:

@example
NumCopies "-#" int;
@end example
@noindent
CLP will generate a variable called @code{NumCopies}.  The value of the
variable can be used to access the option value using the
@code{GetClpValue}
@findex GetClpValue
property access function.

@example
printf ("NumCopies value is %d\n", GetClpValue (NumCopies, 0));
@end example
@noindent
Here @code{0} will be printed if the option was not specified by the user.

Alternatively, presence of the option can be tested for explicitly by
testing the key:
@findex NoKey

@example
if (NumCopies == NoKey)
  printf ("NumCopies not specified\n");
else
  printf ("NumCopies value is %d\n", GetClpValue (NumCopies, 0));
@end example
@noindent
In this case the default value parameter in the @code{GetClpValue} call
will never be used.

@node String value options, Repeated options, Integer value options, Accessing
@section Accessing options with string values

Access to string value options is provided via a database object which
has the appropriate value as a property.  The object is referred to by a
key-value variable named after the option.  For example, given the
specification:

@example
TmpFile "-temp=" joinedto string;
@end example
@noindent
CLP will generate a variable called @code{TmpFile}.  @code{GetClpValue}
@findex GetClpValue
is used to obtain the value which should be interpreted as a string
table index (@pxref{storage, , Arbitrary-length character strings, lib,
Library Reference}).
@findex string table
@findex StringTable

@example
#include "csm.h"

if (TmpFile == NoKey)
  printf ("TmpFile not specified\n");
else
  printf ("TmpFile value is '%s'\n", StringTable (GetClpValue (TmpFile, 0)));
@end example

@node Repeated options, Positional parameter access, String value options, Accessing
@section Accessing options that appear more than once

The mechanisms described in the previous three sections only apply to
options that can appear at most once on the command line.  More
complicated mechanisms are needed to access values associated with
repeated options.
@findex repeated options

CLP uses linked lists of definition table keys
@findex linked list
to provide multiple value access.  The lists are implemented using Eli's
@code{List} module.
@xref{list, , , adt, Specification Module Library: Abstract Data Types}.

Given the specification:

@example
MacroPackage "-m" joinedto strings;
@end example
@noindent
the list module lets you print the multiple values (via keys) as
follows:
@findex DefTableKeyList

@example
#include "csm.h"
#include "clp.h"

DefTableKey printkey (DefTableKey k)
@{
    printf ("%s", StringTable (GetClpValue (k, 0)));
@}

(void) MapDefTableKeyList (MacroPackage, printkey);
@end example

Boolean repeated options are an exception to this list approach.  Since
no value is associated with the option there is little point in having a
list of keys.  For this reason, boolean repeated options are implemented
as a single integer whose value is the number of times the option
appeared.
@findex repeated boolean options
@findex boolean options repeated

@node Positional parameter access, Input parameter access, Repeated options, Accessing
@section Accessing positional parameters

For each singular positional parameter specification line CLP generates
a variable of the appropriate name holding the key to a database
object that has the string value of the positional parameter as a
property.  The value can be accessed as for string value options
(@pxref{String value options}).  

CLP will always make sure that a positional parameter is specified and
will arrange for a usage message to be printed otherwise.
@findex usage message
Thus there is no need to test that the database object described in the
previous paragraph is defined.  For example, given the specification
line:

@example
FileName positional;
@end example
@noindent
the following code can be used to print the specified value:

@example
#include "csm.h"

printf ("Filename given was '%s'\n", StringTable (GetClpValue (FileName, 0)));
@end example

When a plural positional parameter specification line is given the
mechanisms used for repeated option values are used (@pxref{Repeated
options}).  For example, if a processor can take multiple input files a
specification like the following might be used:

@example
FileNames positionals;
@end example
@noindent
The following code can be used to print these parameters
@xref{List, , Linear Lists of Any Type, adt, Specification Module Library: Abstract Data Types}.

@example
#include "csm.h"
#include "clp.h"

DefTableKey printkey (DefTableKey k)
@{
    printf ("%s", StringTable (GetClpValue (k, 0)));
@}

(void) MapDefTableKeyList (FileNames, printkey);
@end example

@node Input parameter access, Reporting open errors, Positional parameter access, Accessing
@section Accessing input parameters

@findex input parameter
Since an input parameter is just a special kind of positional parameter,
its value (which is the name of the input file) can be accessed as shown in
@ref{Positional parameter access,,Accessing positional parameters}.

The input parameter may also be accessed via the standard name
@findex CLP_InputFile
@code{CLP_InputFile}.

@node Reporting open errors, , Input parameter access, Accessing
@section Reporting open errors

CLP defines the text of an error report that a program can write to
standard error when a file cannot be opened
(@pxref{Usage options}).
The program writes this error report by invoking the
@findex ClpOpenError
@code{ClpOpenError} routine:

@example
void ClpOpenError(const char *filename, const char *errtext)
/* On entry-
 *   filename points to the string to replace any %f escape in the report
 *   errtext points to the string to replace any %t escape in the report
 * On exit-
 *   The modified report has been written to stderr
 */
@end example

Although the role of the argument strings is completely arbitrary, the
usual practice is to use the name of the file being opened as the value of
@code{filename} and the string corresponding to the system error as the
value of @code{errtext}.
Here is a code fragment illustrating the typical usage:

@example
#include <errno.h>
#include <string.h>
...
  int infile = open(infilename, 0);
  if (infile == -1) @{
    ClpOpenError(infilename, strerror(errno));
    exit(2);
  @}
...
@end example

@node Grammar, Index, Accessing, top
@chapter Complete Grammar Listing

The following is the complete input grammar for the facilities described in
this manual.
@findex grammar listing

@display
@var{clp_spec} ::= @var{params} .

@var{params} ::= / @var{params} @var{param} @samp{;} .

@var{param} ::=
   @var{identifier} @var{strings} @var{type} @var{doc} /
   @var{identifier} @var{strings} @samp{joinedto} @var{valtype} @var{doc} /
   @var{identifier} @var{strings} @samp{with} @var{valtype} @var{doc} /
   @samp{usage} @var{string} / @samp{terminator} @var{string} /
   @samp{open} @samp{error} @samp{format} @var{string} /
   @samp{open} @samp{error} @samp{usage} .

@var{type} ::= @samp{boolean} / @samp{booleans} / @samp{positional} /
   @samp{positionals} / @var{valtype} .

@var{valtype} ::= @samp{int} / @samp{ints} / @samp{string} / @samp{strings} .

@var{doc} ::= / @var{string} .

@var{strings} ::= @var{string} / @var{strings} @var{string} .
@end display

@node Index,  , Grammar, top
@unnumbered Index

@printindex fn

@contents
@bye

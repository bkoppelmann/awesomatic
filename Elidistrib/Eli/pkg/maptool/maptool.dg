# $Id: maptool.dg,v 2.17 2005/06/08 15:18:24 profw Exp $
# Copyright 1994, The Regents of the University of Colorado

# This file is part of the Eli translator construction system.

# Eli is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version.

# Eli is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.

# You should have received a copy of the GNU General Public License along
# with Eli; see the file COPYING.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

*.sym => :sym;
:sym 'Symbolic grammar mappings'? => :FILE;
:sym.cmpd 'Set of sym specification fragments' => :LIST;
COLLECT  (:sym)
  => (:one.sym.cmpd);
:one.sym.cmpd 'Singleton sym specification' => :sym.cmpd;
COLLECT  (:LIST :extract=:sym)
  => (:ext.sym.cmpd);
:ext.sym.cmpd 'Extracted sym specification fragments' => :sym.cmpd;
EXEC (SymToMap.sh) (.) (:sym.cmpd :cpp)
  => (:SymToMap);
:SymToMap 'Make a map file from a sym file' => :FILE;

EXEC (mapOut.sh) (:lido.cmpd :names) (:con.cmpd :names)
                 (:mapFe :name) (:mapBe :name)
                 (:mapPgram :name) (treestack.h)
  => (:mapOut);
:mapOut 'Output from Maptool step' => :FILE;

EXEC (mapBuOut.sh) (:lido.cmpd :names) (:LIST :extract=:MeBottomUp :cat)
                   (:mapBuPgram :name)
  => (:mapBuOut);
:mapBuOut 'Output from Maptool step with bottomup constraints' => :FILE;

*.map => :mapSrc;
:mapSrc 'Concrete/Abstract syntax mapping'? => :FILE;
:map.cmpd 'Set of map specification fragments' => :LIST;
COLLECT  (:mapSrc)
  => (:one.map.cmpd);
:one.map.cmpd 'Singleton map specification' => :map.cmpd;
COLLECT  (:LIST :extract=:mapSrc)
  => (:ext.map.cmpd);
:ext.map.cmpd 'Extracted map specification fragments' => :map.cmpd;

EXEC (mapBnf.sh) (ebnf.exe) (:con.cmpd :cpp) (maptool.err)
  => (:mapBnf);
:mapBnf 'Strict BNF version of the concrete grammar' => :FILE;

COLLECT (:mapBnf) (:ligaProd) (:map.cmpd) (:SymToMap)
  => (:mapIn);
:mapIn 'Input to the Maptool' => :LIST;

EXEC ($ODINCACHE/PKGS/skeleton/no_map.sh) (+hookvalue) (:mapBnf) mapBnfErr
  => (:mapBnfErr);
:mapBnfErr 'Identity map for errors in standard form' => :line_err;

EXEC (mapGen.sh) (maptool.exe) (:lido.cmpd :names) (:mapIn :cpp) (+parser)
     (maptool.err) (treedef.h) (treestack.c)
  => (:mapConSyn) (:mapAbsSyn) (:mapAbsTree) (:mapFe) (:mapBe) (:mapPgram);
:mapConSyn 'Complete concrete syntax' => :FILE;
:mapAbsSyn 'Complete abstract syntax' => :FILE;
:mapAbsTree 'Complete abstract tree' => :FILE;
:mapFe 'Concrete syntax and grammar symbols' => :DERIVED-DIRECTORY;
:mapBe 'Abstract grammar' => :DERIVED-DIRECTORY;
:mapPgram 'Parsing grammar without bottomup constraints' => :FILE;

EXEC ($ODINCACHE/PKGS/skeleton/no_map.sh) (+hookvalue) (:mapBe) mapBeErr
  => (:mapBeErr);
:mapBeErr 'Identity map for errors in standard form' => :line_err;

EXEC (mapBuGen.sh) (maptool.exe) (:mapIn :cpp)
     (:LIST :extract=:MeBottomUp :cat) (maptool.err)
  => (:mapBuPgram);
:mapBuPgram 'Parsing grammar with bottomup constraints' => :FILE;

CONCATENATE  (:level_2_specs +incl=(:etaIncl) :mapAbsSyn)&
  => (:absyntax);
:absyntax 'Complete abstract syntax'? => <:lido>;

CONCATENATE  (:level_2_specs +incl=(:etaIncl) :mapConSyn)&
  => (:consyntax);
:consyntax 'Complete concrete syntax'? => <:con>;

CONCATENATE  (:level_2_specs +incl=(:etaIncl) :mapAbsTree)&
  => (:abstree);
:abstree 'Complete abstract tree grammar'? => <:lido>;

COLLECT (:level_2_specs +incl=(:etaIncl) :mapOut :list)
  => (:eli*level_3_specs_in);

COLLECT (:level_5_specs +incl=(:etaIncl) :mapBuOut :list)
  => (:eli*level_6_specs_in);

@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: MakeName.fw,v 3.8 2007/02/26 08:11:27 peter Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!


This C module implements functions that turn their arguments
into strings which then play the role of identifiers as if
they occurred in the input, i.e. they are entered in the identifier
table.

The generic instance parameter of the module |IDENT| has to be
set to the terminal CLASS SYMBOL used for identifiers.

The function MakeName takes its string argument as identifier string.
The function IdnNumb attaches a number to an existing identifier.
The function PreIdnPost encloses an existing identifier between two strings.

The function GenerateName attaches a number to a string
such that the resulting identifier string is a new identifier in the
identifier table. If this function is called before the complete input
is processed the chosen identifier may also be found later in the input.
To prevent this effect, a prefix has to be chosen that can not be
a prefix of any legal identifier or keyword.

~O~<MakeName.specs~>~{
$/Input/err.specs
$/Adt/csm.specs
$/Scan/idn.specs
~}

~O~<MakeName.head~>~{
#include "MakeName.h"
~}

~O~<MakeName.h~>~{
#ifndef MAKENAME_H
#define MAKENAME_H

#if defined(__STDC__) || defined (__cplusplus)
extern int GenerateName (const char *prefix);
extern int MakeName (const char *str);
extern int IdnNumb (int	id, int num);
extern int PreIdnPost (const char *pre, int id, const char *post);
#else
extern int GenerateName ();
extern int MakeName ();
extern int IdnNumb ();
extern int PreIdnPost ();
#endif

#endif
~}

~O~<MakeName.c~>~{
#include "err.h"
#include "csm.h"
#include "idn.h"

#define _EMPTY|IDENT|IDENT
#ifndef _EMPTYIDENT
#undef _EMPTY|IDENT|IDENT

/* identifier code is set on instantiation: */
#include "termcode.h"
#define _IDENTCODE |IDENT|

#else
#undef _EMPTY|IDENT|IDENT

/* identifier code is not set on instantiation, use default: */
#define _IDENTCODE 0

#endif

#include "MakeName.h"

#include <string.h>
#define obstack_strgrow(obs, dat) obstack_grow(obs, dat, strlen(dat))
#define obstack_strcpy(obs, dat) obstack_copy0(obs, dat, strlen(dat))


static int	num = 0;

#if defined(__STDC__) || defined(__cplusplus)
int GenerateName (const char *prefix)
#else
int GenerateName (prefix) char *prefix;
#endif
{
    int	newid, stored;
    int	idtoken;
    char numstring[32];

    stored = numstr; /* save number of strings stored so far */
    do {
	num++;
	sprintf (numstring, "%d", num);
	obstack_strgrow(Csm_obstk, prefix);
	CsmStrPtr = (char *)obstack_strcpy(Csm_obstk, numstring);
	idtoken = _IDENTCODE;
	mkidn (CsmStrPtr, strlen (CsmStrPtr), &idtoken, &newid);
    } while (stored == numstr);

    return (newid);

}/*GenerateName*/

int
#if defined(__STDC__) || defined(__cplusplus)
MakeName (const char *str)
#else
MakeName (str) char *str;
#endif
{
    int	newid, idtoken = _IDENTCODE;
    if (str)
    {
        mkidn (str, strlen (str), &idtoken, &newid);
        return (newid);
    }
    else
        return 0;
}/* MakeName */

#if defined(__STDC__) || defined(__cplusplus)
int IdnNumb (int id, int num)
#else
int IdnNumb (id, num) int id, num;
#endif
{
    int	newid, idtoken = _IDENTCODE;
    char numstring[32];

    sprintf (numstring, "%d", num);
    obstack_strgrow(Csm_obstk, StringTable(id));
    CsmStrPtr = (char *)obstack_strcpy(Csm_obstk, numstring);
    mkidn (CsmStrPtr, strlen (CsmStrPtr), &idtoken, &newid);
    return (newid);
}/* IdnNumb */

#if defined(__STDC__) || defined(__cplusplus)
int PreIdnPost (const char *pre, int id, const char *post)
#else
int PreIdnPost (pre, id, post) char *pre, *post; int id;
#endif
{
    int	newid, lg, idtoken = _IDENTCODE;

    obstack_strgrow(Csm_obstk, pre);
    obstack_strgrow(Csm_obstk, StringTable (id));
    CsmStrPtr = (char *)obstack_strcpy(Csm_obstk, post);
    mkidn (CsmStrPtr, strlen (CsmStrPtr), &idtoken, &newid);
    return (newid);
}/* PreIdnPost */
~}

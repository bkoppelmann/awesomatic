/* $Id: LIGA.h,v 4.1 1997/08/29 08:26:49 peter Exp $ */
/* LIGA.h - IDL declarations generated by idlc, version 3.2 
    on Tue Jul  9 18:58:27 1991
*/
/* This file is part of the Eli translator construction system.

Eli is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

Eli is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with Eli; see the file COPYING.  If not, write to the Free Software
Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */


#ifndef LIGA_H
#define LIGA_H

# include "global.h"

/* Private Types */

/* Class Headers */
typedef struct CADef * CPDef;
typedef struct CAUnit * CPUnit;

/* Nodes */
typedef struct RAttrEval * AttrEval;
# define KAttrEval 2
# define NAttrEval (IAttrEval((AttrEval)N_INIT( \
	GetNode(sizeof(struct RAttrEval),KAttrEval), \
	KAttrEval,sizeof(struct RAttrEval))))
# define DAttrEval(n) {FAttrEval(n); FreeNode(n, KAttrEval);}
# define IAttrEval(N) (N)
# define FAttrEval(N)

typedef struct RAttracc * Attracc;
# define KAttracc 4
# define NAttracc (IAttracc((Attracc)N_INIT( \
	GetNode(sizeof(struct RAttracc),KAttracc), \
	KAttracc,sizeof(struct RAttracc))))
# define DAttracc(n) {FAttracc(n); FreeNode(n, KAttracc);}
# define IAttracc(N) (N)
# define FAttracc(N)

typedef struct RAttrdef * Attrdef;
# define KAttrdef 6
# define NAttrdef (IAttrdef((Attrdef)N_INIT( \
	GetNode(sizeof(struct RAttrdef),KAttrdef), \
	KAttrdef,sizeof(struct RAttrdef))))
# define DAttrdef(n) {FAttrdef(n); FreeNode(n, KAttrdef);}
# define IAttrdef(N) (N)
# define FAttrdef(N)

typedef struct RAttribution * Attribution;
# define KAttribution 8
# define NAttribution (IAttribution((Attribution)N_INIT( \
	GetNode(sizeof(struct RAttribution),KAttribution), \
	KAttribution,sizeof(struct RAttribution))))
# define DAttribution(n) {FAttribution(n); FreeNode(n, KAttribution);}
# define IAttribution(N) (N)
# define FAttribution(N)

typedef struct RCall * Call;
# define KCall 10
# define NCall (ICall((Call)N_INIT( \
	GetNode(sizeof(struct RCall),KCall), \
	KCall,sizeof(struct RCall))))
# define DCall(n) {FCall(n); FreeNode(n, KCall);}
# define ICall(N) (N)
# define FCall(N)

typedef struct RChain * Chain;
# define KChain 12
# define NChain (IChain((Chain)N_INIT( \
	GetNode(sizeof(struct RChain),KChain), \
	KChain,sizeof(struct RChain))))
# define DChain(n) {FChain(n); FreeNode(n, KChain);}
# define IChain(N) (N)
# define FChain(N)

typedef struct RChainStart * ChainStart;
# define KChainStart 14
# define NChainStart (IChainStart((ChainStart)N_INIT( \
	GetNode(sizeof(struct RChainStart),KChainStart), \
	KChainStart,sizeof(struct RChainStart))))
# define DChainStart(n) {FChainStart(n); FreeNode(n, KChainStart);}
# define IChainStart(N) (N)
# define FChainStart(N)

typedef struct RChainacc * Chainacc;
# define KChainacc 16
# define NChainacc (IChainacc((Chainacc)N_INIT( \
	GetNode(sizeof(struct RChainacc),KChainacc), \
	KChainacc,sizeof(struct RChainacc))))
# define DChainacc(n) {FChainacc(n); FreeNode(n, KChainacc);}
# define IChainacc(N) (N)
# define FChainacc(N)

typedef struct RConstit * Constit;
# define KConstit 18
# define NConstit (IConstit((Constit)N_INIT( \
	GetNode(sizeof(struct RConstit),KConstit), \
	KConstit,sizeof(struct RConstit))))
# define DConstit(n) {FConstit(n); FreeNode(n, KConstit);}
# define IConstit(N) (N)
# define FConstit(N)

typedef struct RDelim * Delim;
# define KDelim 20
# define NDelim (IDelim((Delim)N_INIT( \
	GetNode(sizeof(struct RDelim),KDelim), \
	KDelim,sizeof(struct RDelim))))
# define DDelim(n) {FDelim(n); FreeNode(n, KDelim);}
# define IDelim(N) (N)
# define FDelim(N)

typedef struct RDelopt * Delopt;
# define KDelopt 22
# define NDelopt (IDelopt((Delopt)N_INIT( \
	GetNode(sizeof(struct RDelopt),KDelopt), \
	KDelopt,sizeof(struct RDelopt))))
# define DDelopt(n) {FDelopt(n); FreeNode(n, KDelopt);}
# define IDelopt(N) (N)
# define FDelopt(N)

typedef struct RIncluding * Including;
# define KIncluding 24
# define NIncluding (IIncluding((Including)N_INIT( \
	GetNode(sizeof(struct RIncluding),KIncluding), \
	KIncluding,sizeof(struct RIncluding))))
# define DIncluding(n) {FIncluding(n); FreeNode(n, KIncluding);}
# define IIncluding(N) (N)
# define FIncluding(N)

typedef struct RLiteral * Literal;
# define KLiteral 26
# define NLiteral (ILiteral((Literal)N_INIT( \
	GetNode(sizeof(struct RLiteral),KLiteral), \
	KLiteral,sizeof(struct RLiteral))))
# define DLiteral(n) {FLiteral(n); FreeNode(n, KLiteral);}
# define ILiteral(N) (N)
# define FLiteral(N)

typedef struct RName * Name;
# define KName 28
# define NName (IName((Name)N_INIT( \
	GetNode(sizeof(struct RName),KName), \
	KName,sizeof(struct RName))))
# define DName(n) {FName(n); FreeNode(n, KName);}
# define IName(N) (N)
# define FName(N)

typedef struct ROpt * Opt;
# define KOpt 30
# define NOpt (IOpt((Opt)N_INIT( \
	GetNode(sizeof(struct ROpt),KOpt), \
	KOpt,sizeof(struct ROpt))))
# define DOpt(n) {FOpt(n); FreeNode(n, KOpt);}
# define IOpt(N) (N)
# define FOpt(N)

typedef struct RPlus * Plus;
# define KPlus 32
# define NPlus (IPlus((Plus)N_INIT( \
	GetNode(sizeof(struct RPlus),KPlus), \
	KPlus,sizeof(struct RPlus))))
# define DPlus(n) {FPlus(n); FreeNode(n, KPlus);}
# define IPlus(N) (N)
# define FPlus(N)

typedef struct RProd * Prod;
# define KProd 34
# define NProd (IProd((Prod)N_INIT( \
	GetNode(sizeof(struct RProd),KProd), \
	KProd,sizeof(struct RProd))))
# define DProd(n) {FProd(n); FreeNode(n, KProd);}
# define IProd(N) (N)
# define FProd(N)

typedef struct RStar * Star;
# define KStar 36
# define NStar (IStar((Star)N_INIT( \
	GetNode(sizeof(struct RStar),KStar), \
	KStar,sizeof(struct RStar))))
# define DStar(n) {FStar(n); FreeNode(n, KStar);}
# define IStar(N) (N)
# define FStar(N)

typedef struct RSymb * Symb;
# define KSymb 38
# define NSymb (ISymb((Symb)N_INIT( \
	GetNode(sizeof(struct RSymb),KSymb), \
	KSymb,sizeof(struct RSymb))))
# define DSymb(n) {FSymb(n); FreeNode(n, KSymb);}
# define ISymb(N) (N)
# define FSymb(N)

typedef struct RSymbattr * Symbattr;
# define KSymbattr 40
# define NSymbattr (ISymbattr((Symbattr)N_INIT( \
	GetNode(sizeof(struct RSymbattr),KSymbattr), \
	KSymbattr,sizeof(struct RSymbattr))))
# define DSymbattr(n) {FSymbattr(n); FreeNode(n, KSymbattr);}
# define ISymbattr(N) (N)
# define FSymbattr(N)

typedef struct RSymbol * Symbol;
# define KSymbol 42
# define NSymbol (ISymbol((Symbol)N_INIT( \
	GetNode(sizeof(struct RSymbol),KSymbol), \
	KSymbol,sizeof(struct RSymbol))))
# define DSymbol(n) {FSymbol(n); FreeNode(n, KSymbol);}
# define ISymbol(N) (N)
# define FSymbol(N)

typedef struct RTransfer * Transfer;
# define KTransfer 44
# define NTransfer (ITransfer((Transfer)N_INIT( \
	GetNode(sizeof(struct RTransfer),KTransfer), \
	KTransfer,sizeof(struct RTransfer))))
# define DTransfer(n) {FTransfer(n); FreeNode(n, KTransfer);}
# define ITransfer(N) (N)
# define FTransfer(N)

typedef struct RTypedef * Typedef;
# define KTypedef 46
# define NTypedef (ITypedef((Typedef)N_INIT( \
	GetNode(sizeof(struct RTypedef),KTypedef), \
	KTypedef,sizeof(struct RTypedef))))
# define DTypedef(n) {FTypedef(n); FreeNode(n, KTypedef);}
# define ITypedef(N) (N)
# define FTypedef(N)

typedef struct RVal * Val;
# define KVal 48
# define NVal (IVal((Val)N_INIT( \
	GetNode(sizeof(struct RVal),KVal), \
	KVal,sizeof(struct RVal))))
# define DVal(n) {FVal(n); FreeNode(n, KVal);}
# define IVal(N) (N)
# define FVal(N)

typedef struct RVisit * Visit;
# define KVisit 50
# define NVisit (IVisit((Visit)N_INIT( \
	GetNode(sizeof(struct RVisit),KVisit), \
	KVisit,sizeof(struct RVisit))))
# define DVisit(n) {FVisit(n); FreeNode(n, KVisit);}
# define IVisit(N) (N)
# define FVisit(N)


/* Classes */
typedef union {
    someptr IDLinternal;
    CPDef IDLclassCommon;
    Chain VChain;
    Typedef VTypedef;
    Symb VSymb;
    Prod VProd;
} Def;

typedef union {
    someptr IDLinternal;
    CPUnit IDLclassCommon;
    Symbol VSymbol;
    Literal VLiteral;
} Unit;

typedef union {
    someptr IDLinternal;
    HgenericHeader IDLclassCommon;
    Unit VUnit;
    Literal VLiteral;
    Symbol VSymbol;
    Opt VOpt;
    Star VStar;
    Plus VPlus;
    Delim VDelim;
    Delopt VDelopt;
} Entity;

typedef union {
    someptr IDLinternal;
    HgenericHeader IDLclassCommon;
    Call VCall;
    Visit VVisit;
    Transfer VTransfer;
    ChainStart VChainStart;
} Attrrule;

typedef union {
    someptr IDLinternal;
    HgenericHeader IDLclassCommon;
    Call VCall;
    Literal VLiteral;
    Val VVal;
    Name VName;
    Attracc VAttracc;
    Chainacc VChainacc;
    Constit VConstit;
    Including VIncluding;
} Expr;


/* Sets and Sequences */
typedef struct IDLtag1{
        struct IDLtag1 *next;
        Symbattr value;
} CSymbattr, *LSymbattr;

# define SEQSymbattr LSymbattr
# define inSEQSymbattr(Symbattrseq,Symbattrvalue) IDLInList((pGenList)Symbattrseq,(someptr)Symbattrvalue)
# define initializeSEQSymbattr(Symbattrseq) Symbattrseq = NULL
# define appendfrontSEQSymbattr(Symbattrseq,Symbattrvalue) Symbattrseq=\
		(SEQSymbattr)IDLListAddFront((pGenList)Symbattrseq,(someptr)Symbattrvalue)
# define appendrearSEQSymbattr(Symbattrseq,Symbattrvalue) Symbattrseq=\
		(SEQSymbattr)IDLListAddRear((pGenList)Symbattrseq,(someptr)Symbattrvalue)
# define orderedinsertSEQSymbattr(Symbattrseq,Symbattrvalue,Symbattrcompfn) Symbattrseq=\
		(SEQSymbattr)IDLListOrderedInsert((pGenList)Symbattrseq,(someptr)Symbattrvalue,Symbattrcompfn)
# define retrievefirstSEQSymbattr(Symbattrseq, Symbattrvalue)\
 		Symbattrvalue = (Symbattr)IDLListRetrieveFirst((pGenList)Symbattrseq)
# define retrievelastSEQSymbattr(Symbattrseq, Symbattrvalue)\
 		Symbattrvalue = (Symbattr)IDLListRetrieveLast((pGenList)Symbattrseq)
# define ithinSEQSymbattr(Symbattrseq, index, Symbattrvalue)\
		Symbattrvalue = (Symbattr)IDLListRetrieveIth((pGenList)Symbattrseq, index)
# define tailSEQSymbattr(Symbattrseq)\
		((Symbattrseq) ? Symbattrseq->next : NULL)
# define removefirstSEQSymbattr(Symbattrseq) Symbattrseq=\
		(SEQSymbattr)IDLListRemoveFirstCell((pGenList)Symbattrseq)
# define removeSEQSymbattr(Symbattrseq,Symbattrvalue) Symbattrseq=\
		(SEQSymbattr)IDLListRemoveCell((pGenList)Symbattrseq,(someptr)Symbattrvalue)
# define removelastSEQSymbattr(Symbattrseq) Symbattrseq=\
		(SEQSymbattr)IDLListRemoveLastCell((pGenList)Symbattrseq)
# define foreachinSEQSymbattr(Symbattrseq,Symbattrptr,Symbattrvalue) for\
(Symbattrptr = Symbattrseq; \
 		Symbattrptr!=NULL&&((Symbattrvalue=(Symbattr)Symbattrptr->value)||1); \
Symbattrptr=Symbattrptr->next)
# define emptySEQSymbattr(Symbattrseq) ((Symbattrseq)==NULL)
# define lengthSEQSymbattr(Symbattrseq) IDLListLength(Symbattrseq)
# define copySEQSymbattr(Symbattrseq) (SEQSymbattr)IDLListCopy((pGenList)Symbattrseq)
# define sortSEQSymbattr(Symbattrseq, cmpfn) Symbattrseq = (SEQSymbattr)IDLListSort(Symbattrseq, cmpfn)

typedef struct IDLtag2{
        struct IDLtag2 *next;
        Expr value;
} CExpr, *LExpr;

# define SEQExpr LExpr
# define inSEQExpr(Exprseq,Exprvalue) IDLInList((pGenList)Exprseq,(Exprvalue).IDLinternal)
# define initializeSEQExpr(Exprseq) Exprseq = NULL
# define appendfrontSEQExpr(Exprseq,Exprvalue) Exprseq=\
		(SEQExpr)IDLListAddFront((pGenList)Exprseq,(Exprvalue).IDLinternal)
# define appendrearSEQExpr(Exprseq,Exprvalue) Exprseq=\
		(SEQExpr)IDLListAddRear((pGenList)Exprseq,(Exprvalue).IDLinternal)
# define orderedinsertSEQExpr(Exprseq,Exprvalue,Exprcompfn) Exprseq=\
		(SEQExpr)IDLListOrderedInsert((pGenList)Exprseq,(Exprvalue).IDLinternal,Exprcompfn)
# define retrievefirstSEQExpr(Exprseq, Exprvalue)\
 		Exprvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveFirst((pGenList)Exprseq)
# define retrievelastSEQExpr(Exprseq, Exprvalue)\
 		Exprvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveLast((pGenList)Exprseq)
# define ithinSEQExpr(Exprseq, index, Exprvalue)\
		Exprvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveIth((pGenList)Exprseq, index)
# define tailSEQExpr(Exprseq)\
		((Exprseq) ? Exprseq->next : NULL)
# define removefirstSEQExpr(Exprseq) Exprseq=\
		(SEQExpr)IDLListRemoveFirstCell((pGenList)Exprseq)
# define removeSEQExpr(Exprseq,Exprvalue) Exprseq=\
		(SEQExpr)IDLListRemoveCell((pGenList)Exprseq,(Exprvalue).IDLinternal)
# define removelastSEQExpr(Exprseq) Exprseq=\
		(SEQExpr)IDLListRemoveLastCell((pGenList)Exprseq)
# define foreachinSEQExpr(Exprseq,Exprptr,Exprvalue) for\
(Exprptr = Exprseq; \
		Exprptr!=NULL&&((Exprvalue.IDLinternal=Exprptr->value.IDLinternal)||1); \
Exprptr=Exprptr->next)
# define emptySEQExpr(Exprseq) ((Exprseq)==NULL)
# define lengthSEQExpr(Exprseq) IDLListLength((someptr)Exprseq)
# define copySEQExpr(Exprseq) (SEQExpr)IDLListCopy((pGenList)Exprseq)
# define sortSEQExpr(Exprseq, cmpfn) Exprseq = (SEQExpr)IDLListSort(Exprseq, cmpfn)

typedef struct IDLtag3{
        struct IDLtag3 *next;
        Attrrule value;
} CAttrrule, *LAttrrule;

# define SEQAttrrule LAttrrule
# define inSEQAttrrule(Attrruleseq,Attrrulevalue) IDLInList((pGenList)Attrruleseq,(Attrrulevalue).IDLinternal)
# define initializeSEQAttrrule(Attrruleseq) Attrruleseq = NULL
# define appendfrontSEQAttrrule(Attrruleseq,Attrrulevalue) Attrruleseq=\
		(SEQAttrrule)IDLListAddFront((pGenList)Attrruleseq,(Attrrulevalue).IDLinternal)
# define appendrearSEQAttrrule(Attrruleseq,Attrrulevalue) Attrruleseq=\
		(SEQAttrrule)IDLListAddRear((pGenList)Attrruleseq,(Attrrulevalue).IDLinternal)
# define orderedinsertSEQAttrrule(Attrruleseq,Attrrulevalue,Attrrulecompfn) Attrruleseq=\
		(SEQAttrrule)IDLListOrderedInsert((pGenList)Attrruleseq,(Attrrulevalue).IDLinternal,Attrrulecompfn)
# define retrievefirstSEQAttrrule(Attrruleseq, Attrrulevalue)\
 		Attrrulevalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveFirst((pGenList)Attrruleseq)
# define retrievelastSEQAttrrule(Attrruleseq, Attrrulevalue)\
 		Attrrulevalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveLast((pGenList)Attrruleseq)
# define ithinSEQAttrrule(Attrruleseq, index, Attrrulevalue)\
		Attrrulevalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveIth((pGenList)Attrruleseq, index)
# define tailSEQAttrrule(Attrruleseq)\
		((Attrruleseq) ? Attrruleseq->next : NULL)
# define removefirstSEQAttrrule(Attrruleseq) Attrruleseq=\
		(SEQAttrrule)IDLListRemoveFirstCell((pGenList)Attrruleseq)
# define removeSEQAttrrule(Attrruleseq,Attrrulevalue) Attrruleseq=\
		(SEQAttrrule)IDLListRemoveCell((pGenList)Attrruleseq,(Attrrulevalue).IDLinternal)
# define removelastSEQAttrrule(Attrruleseq) Attrruleseq=\
		(SEQAttrrule)IDLListRemoveLastCell((pGenList)Attrruleseq)
# define foreachinSEQAttrrule(Attrruleseq,Attrruleptr,Attrrulevalue) for\
(Attrruleptr = Attrruleseq; \
		Attrruleptr!=NULL&&((Attrrulevalue.IDLinternal=Attrruleptr->value.IDLinternal)||1); \
Attrruleptr=Attrruleptr->next)
# define emptySEQAttrrule(Attrruleseq) ((Attrruleseq)==NULL)
# define lengthSEQAttrrule(Attrruleseq) IDLListLength(Attrruleseq)
# define copySEQAttrrule(Attrruleseq) (SEQAttrrule)IDLListCopy((pGenList)Attrruleseq)
# define sortSEQAttrrule(Attrruleseq, cmpfn) Attrruleseq = (SEQAttrrule)IDLListSort(Attrruleseq, cmpfn)

typedef struct IDLtag4{
        struct IDLtag4 *next;
        Attribution value;
} CAttribution, *LAttribution;

# define SEQAttribution LAttribution
# define inSEQAttribution(Attributionseq,Attributionvalue) IDLInList((pGenList)Attributionseq,Attributionvalue)
# define initializeSEQAttribution(Attributionseq) Attributionseq = NULL
# define appendfrontSEQAttribution(Attributionseq,Attributionvalue) Attributionseq=\
		(SEQAttribution)IDLListAddFront((pGenList)Attributionseq,(someptr)Attributionvalue)
# define appendrearSEQAttribution(Attributionseq,Attributionvalue) Attributionseq=\
		(SEQAttribution)IDLListAddRear((pGenList)Attributionseq,(someptr)Attributionvalue)
# define orderedinsertSEQAttribution(Attributionseq,Attributionvalue,Attributioncompfn) Attributionseq=\
		(SEQAttribution)IDLListOrderedInsert((pGenList)Attributionseq,(someptr)Attributionvalue,Attributioncompfn)
# define retrievefirstSEQAttribution(Attributionseq, Attributionvalue)\
 		Attributionvalue = (Attribution)IDLListRetrieveFirst((pGenList)Attributionseq)
# define retrievelastSEQAttribution(Attributionseq, Attributionvalue)\
 		Attributionvalue = (Attribution)IDLListRetrieveLast((pGenList)Attributionseq)
# define ithinSEQAttribution(Attributionseq, index, Attributionvalue)\
		Attributionvalue = (Attribution)IDLListRetrieveIth((pGenList)Attributionseq, index)
# define tailSEQAttribution(Attributionseq)\
		((Attributionseq) ? Attributionseq->next : NULL)
# define removefirstSEQAttribution(Attributionseq) Attributionseq=\
		(SEQAttribution)IDLListRemoveFirstCell((pGenList)Attributionseq)
# define removeSEQAttribution(Attributionseq,Attributionvalue) Attributionseq=\
		(SEQAttribution)IDLListRemoveCell((pGenList)Attributionseq,Attributionvalue)
# define removelastSEQAttribution(Attributionseq) Attributionseq=\
		(SEQAttribution)IDLListRemoveLastCell((pGenList)Attributionseq)
# define foreachinSEQAttribution(Attributionseq,Attributionptr,Attributionvalue) for\
(Attributionptr = Attributionseq; \
 		Attributionptr!=NULL&&((Attributionvalue=Attributionptr->value)||1); \
Attributionptr=Attributionptr->next)
# define emptySEQAttribution(Attributionseq) ((Attributionseq)==NULL)
# define lengthSEQAttribution(Attributionseq) IDLListLength(Attributionseq)
# define copySEQAttribution(Attributionseq) (SEQAttribution)IDLListCopy((pGenList)Attributionseq)
# define sortSEQAttribution(Attributionseq, cmpfn) Attributionseq = (SEQAttribution)IDLListSort(Attributionseq, cmpfn)

typedef struct IDLtag5{
        struct IDLtag5 *next;
        Unit value;
} CUnit, *LUnit;

# define SEQUnit LUnit
# define inSEQUnit(Unitseq,Unitvalue) IDLInList((pGenList)Unitseq,(Unitvalue).IDLinternal)
# define initializeSEQUnit(Unitseq) Unitseq = NULL
# define appendfrontSEQUnit(Unitseq,Unitvalue) Unitseq=\
		(SEQUnit)IDLListAddFront((pGenList)Unitseq,(Unitvalue).IDLinternal)
# define appendrearSEQUnit(Unitseq,Unitvalue) Unitseq=\
		(SEQUnit)IDLListAddRear((pGenList)Unitseq,(Unitvalue).IDLinternal)
# define orderedinsertSEQUnit(Unitseq,Unitvalue,Unitcompfn) Unitseq=\
		(SEQUnit)IDLListOrderedInsert((pGenList)Unitseq,(Unitvalue).IDLinternal,Unitcompfn)
# define retrievefirstSEQUnit(Unitseq, Unitvalue)\
 		Unitvalue.IDLclassCommon = (CPUnit)IDLListRetrieveFirst((pGenList)Unitseq)
# define retrievelastSEQUnit(Unitseq, Unitvalue)\
 		Unitvalue.IDLclassCommon = (CPUnit)IDLListRetrieveLast((pGenList)Unitseq)
# define ithinSEQUnit(Unitseq, index, Unitvalue)\
		Unitvalue.IDLclassCommon = (CPUnit)IDLListRetrieveIth((pGenList)Unitseq, index)
# define tailSEQUnit(Unitseq)\
		((Unitseq) ? Unitseq->next : NULL)
# define removefirstSEQUnit(Unitseq) Unitseq=\
		(SEQUnit)IDLListRemoveFirstCell((pGenList)Unitseq)
# define removeSEQUnit(Unitseq,Unitvalue) Unitseq=\
		(SEQUnit)IDLListRemoveCell((pGenList)Unitseq,(Unitvalue).IDLinternal)
# define removelastSEQUnit(Unitseq) Unitseq=\
		(SEQUnit)IDLListRemoveLastCell((pGenList)Unitseq)
# define foreachinSEQUnit(Unitseq,Unitptr,Unitvalue) for\
(Unitptr = Unitseq; \
		Unitptr!=NULL&&((Unitvalue.IDLinternal=Unitptr->value.IDLinternal)||1); \
Unitptr=Unitptr->next)
# define emptySEQUnit(Unitseq) ((Unitseq)==NULL)
# define lengthSEQUnit(Unitseq) IDLListLength(Unitseq)
# define copySEQUnit(Unitseq) (SEQUnit)IDLListCopy((pGenList)Unitseq)
# define sortSEQUnit(Unitseq, cmpfn) Unitseq = (SEQUnit)IDLListSort(Unitseq, cmpfn)

typedef struct IDLtag6{
        struct IDLtag6 *next;
        Entity value;
} CEntity, *LEntity;

# define SEQEntity LEntity
# define inSEQEntity(Entityseq,Entityvalue) IDLInList((pGenList)Entityseq,(Entityvalue).IDLinternal)
# define initializeSEQEntity(Entityseq) Entityseq = NULL
# define appendfrontSEQEntity(Entityseq,Entityvalue) Entityseq=\
		(SEQEntity)IDLListAddFront((pGenList)Entityseq,(Entityvalue).IDLinternal)
# define appendrearSEQEntity(Entityseq,Entityvalue) Entityseq=\
		(SEQEntity)IDLListAddRear((pGenList)Entityseq,(Entityvalue).IDLinternal)
# define orderedinsertSEQEntity(Entityseq,Entityvalue,Entitycompfn) Entityseq=\
		(SEQEntity)IDLListOrderedInsert((pGenList)Entityseq,(Entityvalue).IDLinternal,Entitycompfn)
# define retrievefirstSEQEntity(Entityseq, Entityvalue)\
 		Entityvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveFirst((pGenList)Entityseq)
# define retrievelastSEQEntity(Entityseq, Entityvalue)\
 		Entityvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveLast((pGenList)Entityseq)
# define ithinSEQEntity(Entityseq, index, Entityvalue)\
		Entityvalue.IDLclassCommon = (HgenericHeader)IDLListRetrieveIth((pGenList)Entityseq, index)
# define tailSEQEntity(Entityseq)\
		((Entityseq) ? Entityseq->next : NULL)
# define removefirstSEQEntity(Entityseq) Entityseq=\
		(SEQEntity)IDLListRemoveFirstCell((pGenList)Entityseq)
# define removeSEQEntity(Entityseq,Entityvalue) Entityseq=\
		(SEQEntity)IDLListRemoveCell((pGenList)Entityseq,(Entityvalue).IDLinternal)
# define removelastSEQEntity(Entityseq) Entityseq=\
		(SEQEntity)IDLListRemoveLastCell((pGenList)Entityseq)
# define foreachinSEQEntity(Entityseq,Entityptr,Entityvalue) for\
(Entityptr = Entityseq; \
		Entityptr!=NULL&&((Entityvalue.IDLinternal=Entityptr->value.IDLinternal)||1); \
Entityptr=Entityptr->next)
# define emptySEQEntity(Entityseq) ((Entityseq)==NULL)
# define lengthSEQEntity(Entityseq) IDLListLength(Entityseq)
# define copySEQEntity(Entityseq) (SEQEntity)IDLListCopy((pGenList)Entityseq)
# define sortSEQEntity(Entityseq, cmpfn) Entityseq = (SEQEntity)IDLListSort(Entityseq, cmpfn)

typedef struct IDLtag7{
        struct IDLtag7 *next;
        Attrdef value;
} CAttrdef, *LAttrdef;

# define SEQAttrdef LAttrdef
# define inSEQAttrdef(Attrdefseq,Attrdefvalue) IDLInList((pGenList)Attrdefseq,Attrdefvalue)
# define initializeSEQAttrdef(Attrdefseq) Attrdefseq = NULL
# define appendfrontSEQAttrdef(Attrdefseq,Attrdefvalue) Attrdefseq=\
		(SEQAttrdef)IDLListAddFront((pGenList)Attrdefseq,(someptr) Attrdefvalue)
# define appendrearSEQAttrdef(Attrdefseq,Attrdefvalue) Attrdefseq=\
		(SEQAttrdef)IDLListAddRear((pGenList)Attrdefseq,(someptr)Attrdefvalue)
# define orderedinsertSEQAttrdef(Attrdefseq,Attrdefvalue,Attrdefcompfn) Attrdefseq=\
		(SEQAttrdef)IDLListOrderedInsert((pGenList)Attrdefseq,(someptr)Attrdefvalue,Attrdefcompfn)
# define retrievefirstSEQAttrdef(Attrdefseq, Attrdefvalue)\
 		Attrdefvalue = (Attrdef)IDLListRetrieveFirst((pGenList)Attrdefseq)
# define retrievelastSEQAttrdef(Attrdefseq, Attrdefvalue)\
 		Attrdefvalue = (Attrdef)IDLListRetrieveLast((pGenList)Attrdefseq)
# define ithinSEQAttrdef(Attrdefseq, index, Attrdefvalue)\
		Attrdefvalue = (Attrdef)IDLListRetrieveIth((pGenList)Attrdefseq, index)
# define tailSEQAttrdef(Attrdefseq)\
		((Attrdefseq) ? Attrdefseq->next : NULL)
# define removefirstSEQAttrdef(Attrdefseq) Attrdefseq=\
		(SEQAttrdef)IDLListRemoveFirstCell((pGenList)Attrdefseq)
# define removeSEQAttrdef(Attrdefseq,Attrdefvalue) Attrdefseq=\
		(SEQAttrdef)IDLListRemoveCell((pGenList)Attrdefseq,(someptr)Attrdefvalue)
# define removelastSEQAttrdef(Attrdefseq) Attrdefseq=\
		(SEQAttrdef)IDLListRemoveLastCell((pGenList)Attrdefseq)
# define foreachinSEQAttrdef(Attrdefseq,Attrdefptr,Attrdefvalue) for\
(Attrdefptr = Attrdefseq; \
 		Attrdefptr!=NULL&&((Attrdefvalue=Attrdefptr->value)||1); \
Attrdefptr=Attrdefptr->next)
# define emptySEQAttrdef(Attrdefseq) ((Attrdefseq)==NULL)
# define lengthSEQAttrdef(Attrdefseq) IDLListLength(Attrdefseq)
# define copySEQAttrdef(Attrdefseq) (SEQAttrdef)IDLListCopy((pGenList)Attrdefseq)
# define sortSEQAttrdef(Attrdefseq, cmpfn) Attrdefseq = (SEQAttrdef)IDLListSort(Attrdefseq, cmpfn)

typedef struct IDLtag8{
        struct IDLtag8 *next;
        Def value;
} CDef, *LDef;

# define SEQDef LDef
# define inSEQDef(Defseq,Defvalue) IDLInList((pGenList)Defseq,(Defvalue).IDLinternal)
# define initializeSEQDef(Defseq) Defseq = NULL
# define appendfrontSEQDef(Defseq,Defvalue) Defseq=\
		(SEQDef)IDLListAddFront((pGenList)Defseq,(Defvalue).IDLinternal)
# define appendrearSEQDef(Defseq,Defvalue) Defseq=\
		(SEQDef)IDLListAddRear((pGenList)Defseq,(Defvalue).IDLinternal)
# define orderedinsertSEQDef(Defseq,Defvalue,Defcompfn) Defseq=\
		(SEQDef)IDLListOrderedInsert((pGenList)Defseq,(Defvalue).IDLinternal,Defcompfn)
# define retrievefirstSEQDef(Defseq, Defvalue)\
 		Defvalue.IDLclassCommon = (CPDef)IDLListRetrieveFirst((pGenList)Defseq)
# define retrievelastSEQDef(Defseq, Defvalue)\
 		Defvalue.IDLclassCommon = (CPDef)IDLListRetrieveLast((pGenList)Defseq)
# define ithinSEQDef(Defseq, index, Defvalue)\
		Defvalue.IDLclassCommon = (CPDef)IDLListRetrieveIth((pGenList)Defseq, index)
# define tailSEQDef(Defseq)\
		((Defseq) ? Defseq->next : NULL)
# define removefirstSEQDef(Defseq) Defseq=\
		(SEQDef)IDLListRemoveFirstCell((pGenList)Defseq)
# define removeSEQDef(Defseq,Defvalue) Defseq=\
		(SEQDef)IDLListRemoveCell((pGenList)Defseq,(Defvalue).IDLinternal)
# define removelastSEQDef(Defseq) Defseq=\
		(SEQDef)IDLListRemoveLastCell((pGenList)Defseq)
# define foreachinSEQDef(Defseq,Defptr,Defvalue) for\
(Defptr = Defseq; \
		Defptr!=NULL&&((Defvalue.IDLinternal=Defptr->value.IDLinternal)||1); \
Defptr=Defptr->next)
# define emptySEQDef(Defseq) ((Defseq)==NULL)
# define lengthSEQDef(Defseq) IDLListLength(Defseq)
# define copySEQDef(Defseq) (SEQDef)IDLListCopy((pGenList)Defseq)
# define sortSEQDef(Defseq, cmpfn) Defseq = (SEQDef)IDLListSort(Defseq, cmpfn)

typedef struct IDLtag9{
        struct IDLtag9 *next;
        int value;
} Cint, *Lint;

# define SEQint Lint
# define inSEQint(intseq,intvalue) IDLInList((pGenList)intseq,(someptr)(unsigned long)intvalue)
# define initializeSEQint(intseq) intseq = NULL
# define appendfrontSEQint(intseq,intvalue) intseq=\
		(SEQint)IDLListAddFront((pGenList)intseq,(someptr)(unsigned long)intvalue)
# define appendrearSEQint(intseq,intvalue) intseq=\
		(SEQint)IDLListAddRear((pGenList)intseq,(someptr)(unsigned long)intvalue)
# define orderedinsertSEQint(intseq,intvalue,intcompfn) intseq=\
		(SEQint)IDLListOrderedInsert((pGenList)intseq,(someptr)(unsigned long)intvalue,intcompfn)
# define retrievefirstSEQint(intseq, intvalue)\
 		intvalue = (unsigned long)IDLListRetrieveFirst((pGenList)intseq)
# define retrievelastSEQint(intseq, intvalue)\
 		intvalue = (int)IDLListRetrieveLast((pGenList)intseq)
# define ithinSEQint(intseq, index, intvalue)\
		intvalue = (int)IDLListRetrieveIth((pGenList)intseq, index)
# define tailSEQint(intseq)\
		((intseq) ? intseq->next : NULL)
# define removefirstSEQint(intseq) intseq=\
		(SEQint)IDLListRemoveFirstCell((pGenList)intseq)
# define removeSEQint(intseq,intvalue) intseq=\
		(SEQint)IDLListRemoveCell((pGenList)intseq,(someptr)intvalue)
# define removelastSEQint(intseq) intseq=\
		(SEQint)IDLListRemoveLastCell((pGenList)intseq)
# define foreachinSEQint(intseq,intptr,intvalue) for\
(intptr = intseq; \
 		intptr!=NULL&&((intvalue=(int) intptr->value)||1); \
intptr=intptr->next)
# define emptySEQint(intseq) ((intseq)==NULL)
# define lengthSEQint(intseq) IDLListLength(intseq)
# define copySEQint(intseq) (SEQint)IDLListCopy((pGenList)intseq)
# define sortSEQint(intseq, cmpfn) intseq = (SEQint)IDLListSort(intseq, cmpfn)

typedef struct IDLtag10{
        struct IDLtag10 *next;
        String value;
} CString, *LString;

# define SEQString LString
# define inSEQString(Stringseq,Stringvalue) IDLInList((pGenList)Stringseq,(someptr)Stringvalue)
# define initializeSEQString(Stringseq) Stringseq = NULL
# define appendfrontSEQString(Stringseq,Stringvalue) Stringseq=\
		(SEQString)IDLListAddFront((pGenList)Stringseq,(someptr)Stringvalue)
# define appendrearSEQString(Stringseq,Stringvalue) Stringseq=\
		(SEQString)IDLListAddRear((pGenList)Stringseq,(someptr)Stringvalue)
# define orderedinsertSEQString(Stringseq,Stringvalue,Stringcompfn) Stringseq=\
		(SEQString)IDLListOrderedInsert((pGenList)Stringseq,(someptr)Stringvalue,Stringcompfn)
# define retrievefirstSEQString(Stringseq, Stringvalue)\
 		Stringvalue = (String)IDLListRetrieveFirst((pGenList)Stringseq)
# define retrievelastSEQString(Stringseq, Stringvalue)\
 		Stringvalue = (String)IDLListRetrieveLast((pGenList)Stringseq)
# define ithinSEQString(Stringseq, index, Stringvalue)\
		Stringvalue = (String)IDLListRetrieveIth((pGenList)Stringseq, index)
# define tailSEQString(Stringseq)\
		((Stringseq) ? Stringseq->next : NULL)
# define removefirstSEQString(Stringseq) Stringseq=\
		(SEQString)IDLListRemoveFirstCell((pGenList)Stringseq)
# define removeSEQString(Stringseq,Stringvalue) Stringseq=\
		(SEQString)IDLListRemoveCell((pGenList)Stringseq,(someptr)Stringvalue)
# define removelastSEQString(Stringseq) Stringseq=\
		(SEQString)IDLListRemoveLastCell((pGenList)Stringseq)
# define foreachinSEQString(Stringseq,Stringptr,Stringvalue) for\
(Stringptr = Stringseq; \
 		Stringptr!=NULL&&((Stringvalue=(String) Stringptr->value)||1); \
Stringptr=Stringptr->next)
# define emptySEQString(Stringseq) ((Stringseq)==NULL)
# define lengthSEQString(Stringseq) IDLListLength(Stringseq)
# define copySEQString(Stringseq) (SEQString)IDLListCopy((pGenList)Stringseq)
# define sortSEQString(Stringseq, cmpfn) Stringseq = (SEQString)IDLListSort(Stringseq, cmpfn)


/* Class Attributes */
struct CADef {
    IDLnodeHeader IDLhidden;
    int did;
    String dname;
    int row;
    int col;
};
struct CAUnit {
    IDLnodeHeader IDLhidden;
    int row;
    int col;
};

/* Node Structures*/
struct RAttrEval { IDLnodeHeader IDLhidden;
    SEQAttribution attrrules;
    SEQDef defseq;
};
struct RAttracc { IDLnodeHeader IDLhidden;
    int col;
    int row;
    int attrid;
    int symbno;
};
struct RAttrdef { IDLnodeHeader IDLhidden;
    String globname;
    int part;
    int gen;
    int store;
    int prodid;
    int class;
    int typeid;
    int col;
    int row;
    String name;
    int did;
};
struct RAttribution { IDLnodeHeader IDLhidden;
    SEQAttrrule attrrules;
    int prodid;
};
struct RCall { IDLnodeHeader IDLhidden;
    int col;
    int row;
    SEQExpr params;
    String name;
};
struct RChain { IDLnodeHeader IDLhidden;
    int did;
    String dname;
    int row;
    int col;
    int typeid;
};
struct RChainStart { IDLnodeHeader IDLhidden;
    int col;
    int row;
    String postgenattr;
    String pregenattr;
    int chainid;
};
struct RChainacc { IDLnodeHeader IDLhidden;
    int col;
    int row;
    int chainid;
    int symbno;
};
struct RConstit { IDLnodeHeader IDLhidden;
    int col;
    int row;
    SEQSymbattr constattrs;
    int subtree;
    int single;
    String genattr;
};
struct RDelim { IDLnodeHeader IDLhidden;
    Literal del;
    SEQUnit rhs;
};
struct RDelopt { IDLnodeHeader IDLhidden;
    Literal del;
    SEQUnit rhs;
};
struct RIncluding { IDLnodeHeader IDLhidden;
    int col;
    int row;
    SEQSymbattr inclattrs;
    int genattrid;
    String genattr;
};
struct RLiteral { IDLnodeHeader IDLhidden;
    int row;
    int col;
    String str;
};
struct RName { IDLnodeHeader IDLhidden;
    int col;
    int row;
    String n;
};
struct ROpt { IDLnodeHeader IDLhidden;
    SEQUnit rhs;
};
struct RPlus { IDLnodeHeader IDLhidden;
    SEQUnit rhs;
};
struct RProd { IDLnodeHeader IDLhidden;
    int did;
    String dname;
    int row;
    int col;
    SEQEntity rhs;
    int lhs;
};
struct RStar { IDLnodeHeader IDLhidden;
    SEQUnit rhs;
};
struct RSymb { IDLnodeHeader IDLhidden;
    int did;
    String dname;
    int row;
    int col;
    SEQAttrdef attrs;
    int tornt;
};
struct RSymbattr { IDLnodeHeader IDLhidden;
    int attrdef;
    int symbdef;
};
struct RSymbol { IDLnodeHeader IDLhidden;
    int row;
    int col;
    int did;
};
struct RTransfer { IDLnodeHeader IDLhidden;
    int col;
    int row;
    SEQString attrs;
    SEQint symbno;
};
struct RTypedef { IDLnodeHeader IDLhidden;
    int did;
    String dname;
    int row;
    int col;
    int listedto;
    String extname;
};
struct RVal { IDLnodeHeader IDLhidden;
    int col;
    int row;
    int v;
};
struct RVisit { IDLnodeHeader IDLhidden;
    int ord;
    int symbno;
};

/* Port Declarations */
void ligaout();
AttrEval ligain();

#endif

# $Id#
#
# Deadly Errors
#

# (C) Copyright 1997 University of Paderborn
#
# This file is part of the Eli translator construction system.
# 
# Eli is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later
# version.
# 
# Eli is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License along
# with Eli; see the file COPYING.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  

/NewEnv: malloc failed/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/subtree .* must be a .*/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/AddIdn: Too many identifiers/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/DefineIdn: Too many identifiers/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/KeyInEnv: Too many identifiers/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/Memory overflow in mkidn/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/Negative length in mkidn/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/NewKey: malloc failure/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/NewStkElt: malloc failed/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/an .* node can not be generated /{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/find: malloc failure/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/node stack overflow/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/IntSet: AddElIS got wrong elem/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/IntSet: InIS got wrong elem/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/IntSet: SingleIS got wrong elem/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}

# 
# Errors
#
/Syntax error/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/Symbol inserted/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/Symbol deleted/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/Parsing resumed here/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/Wrong parse tables/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/Parse stack overflow/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/Accept not expected/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/HeadPL: empty list/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/InserAfterPL: null list/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/IthElemPl: no such element/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/RefEndAppPL: no PtrList ref/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/RefEndConsPL: no PtrList ref/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/\\x used with no following hex digits/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/char '.' (ascii:.*) is not a token/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/char '.' (ascii:.*) not complete token/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/file ends in comment/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/illegal newline in string literal/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/illformed char quote/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/newline in char quote/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/newline or EOF in char quote/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/newline or EOF in string/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/not a pascal comment/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/quote in char quote/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/Different RULE kinds for this identifier/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/Different RULEs for this identifier/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/There is a LISTOF rule for the same lhs/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/There is a different rule for the same lhs/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}

/file ends in literal string/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Syntax./
	p
	d
}
/This symbol identifier is also used as rule or type identifier/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Overall Structure./
        p
        d
}
/This rule identifier is also used as symbol or type identifier/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Overall Structure./
        p
        d
}
/This type identifier is also used as rule or symbol identifier/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Overall Structure./
        p
        d
}
/malformed character constant/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/There is a LISTOF rule for the same lhs/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/There is a different rule for the same lhs/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}

/unknown escape sequence: `\\' followed by char/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
/unnamed rule refers to several named rules/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/named rule refers to unnamed rule/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}
/named rule refers to unnamed rule/{
        s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Rule Specifications./
        p
        d
}

#
# Fatals
#
/No mem for auxCString/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/auxCString + c_mkstr must be used as a pair/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)system./
	p
	d
}
/malloc fail: CaseTbl0/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/multi-line string too long/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}
/out of mem for multi-line string/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (help)limits./
	p
	d
}

#
# Notes
#
/unknown escape sequence/{
	s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (lidoref)Simple Expressions./
	p
	d
}
s/^\([^ ]* [0-9]* [0-9]*\)/\1 : (nodoc)./

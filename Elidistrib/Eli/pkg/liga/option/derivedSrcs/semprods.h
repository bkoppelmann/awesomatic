switch( action ) {
	case (OFFSET+1) : _incrnodestack();_nst[_nsp]=MkARRANGE1(&curpos); break;
	case (OFFSET+2) : _incrnodestack();_nst[_nsp]=MkARRANGE4(&curpos); break;
	case (OFFSET+3) : _incrnodestack();_nst[_nsp]=MkARRANGE2(&curpos, MkIdentifier(&(T_POS(TokenStack(2))), T_ATTR(TokenStack(2))), MkIdentifier(&(T_POS(TokenStack(4))), T_ATTR(TokenStack(4))), MkIdentifier(&(T_POS(TokenStack(6))), T_ATTR(TokenStack(6)))); break;
	case (OFFSET+4) : _nsp -= 1;_nst[_nsp]=MkARRANGE3(&curpos, MkIdentifier(&(T_POS(TokenStack(2))), T_ATTR(TokenStack(2))), _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+5) : _incrnodestack();_nst[_nsp]=MkATTRS2(&curpos); break;
	case (OFFSET+6) : _nsp -= 1;_nst[_nsp]=MkATTRS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+7) : _nst[_nsp]=MkATTRNAMES(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), _nst[_nsp+0]); break;
	case (OFFSET+8) : _incrnodestack();_nst[_nsp]=MkATTR1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), MkIntNumber(&(T_POS(TokenStack(2))), T_ATTR(TokenStack(2))), MkIdentifier(&(T_POS(TokenStack(5))), T_ATTR(TokenStack(5)))); break;
	case (OFFSET+9) : _incrnodestack();_nst[_nsp]=MkATTRTYPE1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+10) : _incrnodestack();_nst[_nsp]=MkATTRTYPE2(&curpos); break;
	case (OFFSET+11) : _incrnodestack();_nst[_nsp]=MkBACKEND1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+12) : _incrnodestack();_nst[_nsp]=MkBACKEND2(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), MkIntNumber(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+13) : _nst[_nsp]=MkBACKS2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+14) : _nsp -= 1;_nst[_nsp]=MkBACKS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+15) : _incrnodestack();_nst[_nsp]=MkEXPAND2(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+16) : _incrnodestack();_nst[_nsp]=MkEXPAND1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+17) : _incrnodestack();_nst[_nsp]=MkEXPAND3(&curpos, MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+18) : _nst[_nsp]=MkEXPANDS2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+19) : _nsp -= 1;_nst[_nsp]=MkEXPANDS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+20) : _incrnodestack();_nst[_nsp]=MkIDENTS2(&curpos); break;
	case (OFFSET+21) : _nst[_nsp]=MkIDENTS1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), _nst[_nsp+0]); break;
	case (OFFSET+22) : _incrnodestack();_nst[_nsp]=MkNAMESL2(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+23) : _nst[_nsp]=MkNAMESL1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), _nst[_nsp+0]); break;
	case (OFFSET+24) : _nsp -= 1;_nst[_nsp]=MkOPTIM3(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+25) : _incrnodestack();_nst[_nsp]=MkOPTIM2(&curpos, MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+26) : _incrnodestack();_nst[_nsp]=MkOPTIM1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0)))); break;
	case (OFFSET+27) : _nst[_nsp]=MkOPTIMS2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+28) : _nsp -= 1;_nst[_nsp]=MkOPTIMS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+29) : _nst[_nsp]=MkOPTBACK(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+30) : _nst[_nsp]=MkOPTEXP(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+31) : _nst[_nsp]=MkOPTOPT(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+32) : _nst[_nsp]=MkOPTORD(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+33) : _incrnodestack();_nst[_nsp]=MkOPTIONS2(&curpos); break;
	case (OFFSET+34) : _nsp -= 1;_nst[_nsp]=MkOPTIONS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+35) : _nst[_nsp]=MkORDER4(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+36) : _nst[_nsp]=MkORDER2(&curpos, MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1))), _nst[_nsp+0]); break;
	case (OFFSET+37) : _incrnodestack();_nst[_nsp]=MkORDER1(&curpos, MkIdentifier(&(T_POS(TokenStack(0))), T_ATTR(TokenStack(0))), MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+38) : _nst[_nsp]=MkORDERS2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+39) : _nsp -= 1;_nst[_nsp]=MkORDERS1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+40) : _incrnodestack();_nst[_nsp]=MkORDER3(&curpos, MkIdentifier(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+41) : _nst[_nsp]=MkSTART(&curpos, _nst[_nsp+0]); break;
}

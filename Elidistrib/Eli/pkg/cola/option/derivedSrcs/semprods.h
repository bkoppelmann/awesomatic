switch( action ) {
	case (OFFSET+1) : _incrnodestack();_nst[_nsp]=MkDC2(&curpos); break;
	case (OFFSET+2) : _nst[_nsp]=MkDC11(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+3) : _nst[_nsp]=MkDC7(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+4) : _nst[_nsp]=MkDC9(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+5) : _nst[_nsp]=MkDC4(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+6) : _nst[_nsp]=MkDC8(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+7) : _incrnodestack();_nst[_nsp]=MkDC1(&curpos); break;
	case (OFFSET+8) : _nst[_nsp]=MkDC10(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+9) : _incrnodestack();_nst[_nsp]=MkDC6(&curpos, Mkinteger(&(T_POS(TokenStack(2))), T_ATTR(TokenStack(2)))); break;
	case (OFFSET+10) : _incrnodestack();_nst[_nsp]=MkDC5(&curpos, Mkinteger(&(T_POS(TokenStack(2))), T_ATTR(TokenStack(2)))); break;
	case (OFFSET+11) : _incrnodestack();_nst[_nsp]=MkDC3(&curpos); break;
	case (OFFSET+12) : _nst[_nsp]=MkD2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+13) : _nst[_nsp]=MkD3(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+14) : _nst[_nsp]=MkD1(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+15) : _incrnodestack();_nst[_nsp]=MkDE2(&curpos); break;
	case (OFFSET+16) : _incrnodestack();_nst[_nsp]=MkDE1(&curpos, Mkinteger(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+17) : _incrnodestack();_nst[_nsp]=MkDE3(&curpos); break;
	case (OFFSET+18) : _nst[_nsp]=MkF3(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+19) : _nst[_nsp]=MkF2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+20) : _nst[_nsp]=MkF1(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+21) : _incrnodestack();_nst[_nsp]=MkM1(&curpos); break;
	case (OFFSET+22) : _incrnodestack();_nst[_nsp]=MkM2(&curpos); break;
	case (OFFSET+23) : _incrnodestack();_nst[_nsp]=MkM3(&curpos); break;
	case (OFFSET+24) : _incrnodestack();_nst[_nsp]=MkM4(&curpos); break;
	case (OFFSET+25) : _incrnodestack();_nst[_nsp]=MkM5(&curpos); break;
	case (OFFSET+26) : _incrnodestack();_nst[_nsp]=MkM6(&curpos); break;
	case (OFFSET+27) : _incrnodestack();_nst[_nsp]=MkM8(&curpos); break;
	case (OFFSET+28) : _incrnodestack();_nst[_nsp]=MkM7(&curpos); break;
	case (OFFSET+29) : _incrnodestack();_nst[_nsp]=MkSW2(&curpos); break;
	case (OFFSET+30) : _incrnodestack();_nst[_nsp]=MkSW1(&curpos); break;
	case (OFFSET+31) : _nst[_nsp]=MkOpt4(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+32) : _nst[_nsp]=MkOpt2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+33) : _incrnodestack();_nst[_nsp]=MkOpt5(&curpos); break;
	case (OFFSET+34) : _nsp -= 1;_nst[_nsp]=MkOpt1(&curpos, _nst[_nsp+0], _nst[_nsp+1]); break;
	case (OFFSET+35) : _nst[_nsp]=MkOpt3(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+36) : _nst[_nsp]=MkDS5(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+37) : _nst[_nsp]=MkDS2(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+38) : _nst[_nsp]=MkDS3(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+39) : _nst[_nsp]=MkDS4(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+40) : _incrnodestack();_nst[_nsp]=MkDS6(&curpos, Mkinteger(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+41) : _incrnodestack();_nst[_nsp]=MkDS1(&curpos, Mkinteger(&(T_POS(TokenStack(1))), T_ATTR(TokenStack(1)))); break;
	case (OFFSET+42) : _nst[_nsp]=MkRoot(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+43) : _nst[_nsp]=MkT3(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+44) : _nst[_nsp]=MkT1(&curpos, _nst[_nsp+0]); break;
	case (OFFSET+45) : _nst[_nsp]=MkT2(&curpos, _nst[_nsp+0]); break;
}

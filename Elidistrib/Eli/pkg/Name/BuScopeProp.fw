@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: BuScopeProp.fw,v 5.2 1997/08/29 12:08:20 mjung Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements consistent renaming of identifiers
using scopes which are properties associated to object keys.

Using this module requires that the module for the basic 
consistent renaming task, |NAME|BuScope is also used.
Both modules have to be instantiated with the same
generic parameters: instance=|NAME| and referto=|KEY|.

The module provides the following computational roles:

~O~<|NAME|BuScopeProp.lido~>~{
~<|NAME|Extend~>
~<|NAME|IdSetScopeProp~>
~<|NAME|GetScopeProp~>
~<|NAME|IdUseScopeProp~>
~}

The module introduces the property |NAME|Scope:
~O~<|NAME|BuScopeProp.pdl~>~{
|NAME|Scope:	Environment; "envmod.h"
~}

The Computational Roles:

The |NAME|RootScope computations are augmented
by establishing
a condition THIS.|NAME|GotScopeProp which guarantees
that all |NAME|Scope properties are associated and the bindings
in those scopes are made.

~$~<|NAME|Extend~>==~{
CLASS SYMBOL |NAME|RootScope:
	|NAME|GotScopeProp:	VOID	SYNT;	/* provided */

CLASS SYMBOL |NAME|RootScope COMPUTE
  SYNT.|NAME|GotScopeProp = TAIL._C_|NAME|GotKeys;
END;
~}

~$~<|NAME|IdSetScopeProp~>==~{
CLASS SYMBOL |NAME|IdSetScopeProp:
	|KEY|Key:	DefTableKey	SYNT,	/* required */
	|NAME|NewScope:	Environment	SYNT;	/* required */

CLASS SYMBOL |NAME|IdSetScopeProp COMPUTE
  Reset|NAME|Scope (SYNT.|KEY|Key, SYNT.|NAME|NewScope)
	BOTTOMUP;
END;
~}

~$~<|NAME|GetScopeProp~>==~{
CLASS SYMBOL |NAME|GetScopeProp:
	|KEY|ScopeKey:	DefTableKey	SYNT,	/* required */
	|NAME|ScopeProp:Environment	SYNT;	/* provided */

CLASS SYMBOL |NAME|GetScopeProp COMPUTE
  SYNT.|NAME|ScopeProp =
	ORDER (_|NAME|ASSIGN (_V_|NAME|ScopeProp,
			      Get|NAME|Scope (SYNT.|KEY|ScopeKey, NoEnv)),
	       _V_|NAME|ScopeProp) BOTTOMUP;
END;
~}

|NAME|IdUseScopeProp
is an applied identifier occurrence.
A scope is to be given by the attribute SYNT.|NAME|Scope.
This identifier is bound in the scope SYNT.|NAME|Scope.

~$~<|NAME|IdUseScopeProp~>==~{
CLASS SYMBOL |NAME|IdUseScopeProp:
	Sym:		int,			/* required */
	|KEY|Bind:	Binding		SYNT,	/* provided */
	|KEY|Key:	DefTableKey	SYNT;	/* provided */

CLASS SYMBOL |NAME|IdUseScopeProp COMPUTE
  SYNT.|KEY|Bind =
	BindingInScope (_V_|NAME|ScopeProp, THIS.Sym)
	<- THIS._C_|NAME|GotKeys BOTTOMUP;
  SYNT.|KEY|Key = KeyOf (SYNT.|KEY|Bind);
  THIS._C_|NAME|GotKeys = SYNT.|KEY|Key;
END;
~}

~O~<|NAME|BuScopeProp.head~>~{
#include "|NAME|BuScopeProp.h"
~}

~O~<|NAME|BuScopeProp.h~>~{
#include "envmod.h"
extern Environment _V_|NAME|ScopeProp;
~}

~O~<|NAME|BuScopeProp.c~>~{
#include "|NAME|BuScopeProp.h"
Environment _V_|NAME|ScopeProp = NoEnv;
~}

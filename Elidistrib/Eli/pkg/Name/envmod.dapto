/* $Id: envmod.dapto,v 1.3 2000/08/24 13:56:32 uwe Exp $
/* (C) Copyright 1998 University of Paderborn
 * 
 * This file is part of the Eli translator construction system.
 * 
 * Eli is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2, or (at your option) any later
 * version.
 * 
 * Eli is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with Eli; see the file COPYING.  If not, write to the Free Software
 * Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
aspect envmod;

"envmod.h"

event env_created* "An environment value has been created"
    (Environment env "The environment that was created",
     Environment parent "The parent environment (if any)");

event binding_made* "A binding has been made in an environment"
    (Environment env "The environment in which the binding was made",
     int idn "The identifier that was bound",
     DefTableKey key "The key to which the identifier was bound");

operation get_scope_info
    "Return the parent environment of an environment and its idn-key bindings"
    (Environment env "The environment to be searched") : str
{
    Scope s;

    DAPTO_RESULT_PTR (env->parent);
    DAPTO_RESULT_PTR (env->classdescr);
    for (s = env->relate; s != NoScope; s = s->nxt) {
	DAPTO_RESULT_INT (s->idn);
	DAPTO_RESULT_PTR (s->key);
    }   
}
 
operation get_binding_info
    "Return the components of a binding"
    (Binding bind "The binding of interest") : str
{
    DAPTO_RESULT_INT (bind->idn);
    DAPTO_RESULT_PTR (bind->key);
    DAPTO_RESULT_PTR (bind->env);
}
 
operation get_inheritance_info
    "Return the inheritance information of an environment"
    (_Class cl "The environment's classdescr") : str
{
    InheritPtr i;

    for (i = cl->inhlist; i != NoInherit; i = i->nxt) {
	DAPTO_RESULT_PTR (i->fromcl->env);
    }   
}

end;

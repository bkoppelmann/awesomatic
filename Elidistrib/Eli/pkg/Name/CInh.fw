@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: CInh.fw,v 5.2 1997/08/29 12:08:20 mjung Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements inheritance of scope properties
to environments.

Using this module requires that the modules for the basic 
consistent renaming task, |NAME|CScope, and for scope properties,
|NAME|CScopeProp are also used.

All three modules have to be instantiated with the same
generic parameters: instance=|NAME| and referto=|KEY|.


This module provides the following computational roles:

~O~<|NAME|CInh.lido~>~{
~<|NAME|Extend~>
~<|NAME|RangeMulInh~>
~<|NAME|InheritScope~>
~<|NAME|ChkInherit~>
~<|NAME|ChkInhIdUse~>
~<|NAME|ChkInhQualIdUse~>
~}

The following roles of the CScope and the CScopeProp modules
are augmented to ensure that inheritances are established
when applied identifier occurrences are bound.

~$~<|NAME|Extend~>==~{
CHAIN _C_|NAME|GotInhScopes:	VOID;

CLASS SYMBOL |NAME|RootScope:
	|NAME|GotInhScopes:	VOID	SYNT;	/* provided */

CLASS SYMBOL |NAME|RootScope COMPUTE
  CHAINSTART HEAD._C_|NAME|GotInhScopes = "yes";
  SYNT.|NAME|GotInhScopes = TAIL._C_|NAME|GotInhScopes;
END;

CLASS SYMBOL |NAME|IdUseEnv COMPUTE
  SYNT._|NAME|InhPrecond = THIS._C_|NAME|GotInhScopes;
END;

CLASS SYMBOL |NAME|IdUseScope COMPUTE
  SYNT._|NAME|InhPrecond = THIS._C_|NAME|GotInhScopes;
END;

CLASS SYMBOL |NAME|IdUseScopeProp COMPUTE
  SYNT._|NAME|InhPrecond = THIS._C_|NAME|GotInhScopes;
END;
~}


|NAME|InhRange
is a specialized |NAME|RangeScope which is embedded
into other scopes via the inheritance relation established
by |NAME|Inherit occurrences (outside this range).

This range may also be a |NAME|ExportRange (e.g. in case of
class bodies).

~$~<|NAME|RangeMulInh~>==~{
CLASS SYMBOL |NAME|InhRange INHERITS |NAME|AnyScope END;

CLASS SYMBOL |NAME|InhRange:
	|NAME|GotInh:	VOID;	/* required */

CLASS SYMBOL |NAME|InhRange INHERITS |NAME|RangeScope COMPUTE
  HEAD._C_|NAME|GotInhScopes = INH.|NAME|GotInh
  	<- (THIS._C_|NAME|GotKeys,
	    THIS._C_|NAME|GotInhScopes);
END;

CLASS SYMBOL |NAME|ExportInhRange 
  INHERITS |NAME|InhRange, |NAME|ExportRange END;
~}

|NAME|InheritScope
The scope THIS.|NAME|OuterScope is embbedded in
the scope SYNT.|NAME|InnerScope via inheritance.

|NAME|InheritScope.|NAME|InheritOk is set to 1 iff the inheritance
relation is legal, i.e. non cyclic and both scopes in the same
environment hierarchy.

~$~<|NAME|InheritScope~>==~{
CLASS SYMBOL |NAME|InheritScope:
	|NAME|InnerScope:	Environment,	/* required */
	|NAME|OuterScope:	Environment,	/* provided */
	|NAME|ScopeKey:		DefTableKey,	/* required */
	|NAME|InheritOk:	int	SYNT;	/* provided */

CLASS SYMBOL |NAME|InheritScope COMPUTE
  SYNT.|NAME|OuterScope = 
     Get|NAME|Scope (THIS.|NAME|ScopeKey, NoEnv)
       	<- THIS._C_|NAME|GotInhScopes;
  SYNT.|NAME|InheritOk =
	InheritClass (THIS.|NAME|InnerScope,
		      THIS.|NAME|OuterScope);
END;
~}

|NAME|ChkInherit
can be used to issue error messages in cases that the 
|NAME|OuterScope is not set correctly or the inheritance
relation could not be established, e.g. because it would be
cyclic.

~$~<|NAME|ChkInherit~>==~{
CLASS SYMBOL |NAME|ChkInherit:
        SrcErr:         int,    /* provided */
        SrcMsg:         VOID,   /* provided */
        ScpErr:         int,    /* provided */
        ScpMsg:         VOID;   /* provided */

CLASS SYMBOL |NAME|ChkInherit COMPUTE
  SYNT.SrcErr = EQ (SYNT.|NAME|OuterScope, NoEnv);
  SYNT.SrcMsg = IF (THIS.SrcErr,
      message (ERROR, "Source of inheritance is missing", 0, COORDREF));

  SYNT.ScpErr = AND (NOT (THIS.|NAME|InheritOk),
           NE (THIS.|NAME|OuterScope, NoEnv));
  SYNT.ScpMsg = IF (THIS.ScpErr,
      message (ERROR, "Wrong scope inherited", 0, COORDREF));
END;
~}


|NAME|ChkInhIdUse
checks whether for a given identifier more that one binding 
can be identified on different inheritance pathes due to
multiple inheritance. 
This role may be used for unqualified names, i.e. together 
with |NAME|IdUseEnv or |NAME|IdUseScope;

~$~<|NAME|ChkInhIdUse~>==~{
CLASS SYMBOL |NAME|ChkInhIdUse:
        |KEY|Bind:      Binding,        /* required */
        MulErr:         int,            /* provided */
        MulMsg:         VOID;           /* provided */

CLASS SYMBOL |NAME|ChkInhIdUse COMPUTE
  SYNT.MulErr=AND (NE (NoBinding, THIS.|KEY|Bind),
           NE (NoBinding,
               NextInhBinding
                 (INCLUDING |NAME|AnyScope.|NAME|Env,
                  THIS.|KEY|Bind)));
  SYNT.MulMsg = IF (THIS.MulErr,
       message (ERROR,
           CatStrInd ("Several definitions are inherited for: ",
                      IdnOf (THIS.|KEY|Bind)),
           0, COORDREF));
END;
~}

|NAME|ChkInhQualIdUse
checks whether for a given identifier more that one binding 
can be identified on different inheritance pathes due to
multiple inheritance. 
This role may be used for qualified names, i.e. together 
|NAME|QualIdUse.

~$~<|NAME|ChkInhQualIdUse~>==~{
CLASS SYMBOL |NAME|ChkInhQualIdUse:
        |NAME|Scope:    Environment,    /* required */
        |KEY|Bind:      Binding,        /* required */
        MulErr:         int,            /* provided */
        MulMsg:         VOID;           /* provided */

CLASS SYMBOL |NAME|ChkInhQualIdUse COMPUTE
  SYNT.MulErr = AND (NE (NoBinding, THIS.|KEY|Bind),
           NE (NoBinding,
               NextInhBinding (THIS.|NAME|Scope, THIS.|KEY|Bind)));
  SYNT.MulMsg = IF (THIS.MulErr,
      message (ERROR,
           CatStrInd ("Several definitions are inherited for: ",
                      IdnOf (THIS.|KEY|Bind)),
           0, COORDREF));
END;
~}

~O~<|NAME|CInh.specs~>~{
$/Tech/Strings.specs
~}

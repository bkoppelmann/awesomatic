@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~! $Id: AlgScopeProp.fw,v 5.2 1997/08/29 12:08:20 mjung Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!

This module implements consistent renaming of identifiers
using scopes which are properties associated to object keys.

Using this module requires that the module for the basic 
consistent renaming task, |NAME|AlgScope is also used.
Both modules have to be instantiated with the same
generic parameters: instance=|NAME| and referto=|KEY|.

The module provides the following computational roles:

~O~<|NAME|AlgScopeProp.lido~>~{
~<|NAME|Extend~>
~<|NAME|RangeScopeProp~>
~<|NAME|IdUseScopeProp~>
~}
The computational roles |NAME|RootScope of the basic module is extended
here.

The module introduces the property |NAME|Scope:
~O~<|NAME|ScopeProp.pdl~>~{
|NAME|Scope:	Environment; "envmod.h"
~}

The Computational Roles:

The |NAME|RootScope computations are augmented
by establishing
a condition THIS.|NAME|GotScopeProp which guarantees
that all |NAME|Scope properties are associated and the bindings
in those scopes are made.
This is a precondition for finding a binding in |NAME|IdUseScopeProp.
(It has to be that general because selections go outside-in.)

~$~<|NAME|Extend~>==~{
CLASS SYMBOL |NAME|RootScope:
	|NAME|GotScopeProp:	VOID	SYNT;	/* provided */

CLASS SYMBOL |NAME|RootScope COMPUTE
  SYNT.|NAME|GotScopeProp =
	CONSTITUENTS |NAME|RangeScopeProp._|NAME|GotScopeProp
		SHIELD ();
END;
~}

|NAME|RangeScopeProp 
is a |NAME|RangeScope. Its scope
is to be associated as the |NAME|Scope property
to the key THIS.|KEY|ScopeKey.
All local definitions are bound in this scope.

~$~<|NAME|RangeScopeProp~>==~{
CLASS SYMBOL |NAME|RangeScopeProp INHERITS |NAME|AnyScope END;

CLASS SYMBOL |NAME|RangeScopeProp:
	|KEY|ScopeKey:		DefTableKey,	/* required */
	_|NAME|GotScopeProp:	VOID;		/* local */

CLASS SYMBOL |NAME|RangeScopeProp INHERITS |NAME|RangeScope COMPUTE
  SYNT._|NAME|GotScopeProp =
	Reset|NAME|Scope (THIS.|KEY|ScopeKey, THIS.|NAME|Env)
	<- THIS.|NAME|GotLocKeys;
END;
~}

|NAME|IdUseScopeProp 
is an applied identifier occurrence.
A scope is to be given by the attribute SYNT.|NAME|Scope.
This identifier is bound in the scope SYNT.|NAME|Scope.

~$~<|NAME|IdUseScopeProp~>==~{
CLASS SYMBOL |NAME|IdUseScopeProp:
	Sym:			int,		/* required */
	|NAME|Scope:	Environment,		/* required */
	|KEY|Bind:	Binding		SYNT,	/* provided */
	|KEY|Key:	DefTableKey	SYNT;	/* provided */

CLASS SYMBOL |NAME|IdUseScopeProp INHERITS _|NAME|InhPrecondDefault 
COMPUTE
  SYNT.|KEY|Bind =
	BindingInScope (THIS.|NAME|Scope, THIS.Sym)
	<- SYNT._|NAME|InhPrecond;
  SYNT.|KEY|Key = KeyOf (SYNT.|KEY|Bind);
END;
~}

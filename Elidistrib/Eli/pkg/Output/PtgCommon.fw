@=~
~p typesetter = texinfo
~p maximum_input_line_length = infinity
~p maximum_output_line_length = infinity

~! $Id: PtgCommon.fw,v 1.12 2009/01/06 10:52:12 peter Exp $
~!
~! (C) Copyright 1997 University of Paderborn.
~! 
~! This file is part of the Eli Module Library.
~! 
~! The Eli Module Library is free software; you can redistribute it and/or
~! modify it under the terms of the GNU Library General Public License as
~! published by the Free Software Foundation; either version 2 of the
~! License, or (at your option) any later version.
~! 
~! The Eli Module Library is distributed in the hope that it will be
~! useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
~! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
~! Library General Public License for more details.
~! 
~! You should have received a copy of the GNU Library General Public
~! License along with the Eli Module Library; see the file COPYING.LIB.
~! If not, write to the Free Software Foundation, Inc., 59 Temple Place -
~! Suite 330, Boston, MA 02111-1307, USA. 
~!
~t title titlefont centre "Module PtgCommon"

This module supplies often used ptg patterns and support functions
for the output of PTG Patterns. It contains the ptg patterns that
used to be included inside the @{LeafPtg@}-Module up to Version 4.0.2
of Eli and some more, often used patterns.

~A~<Output of Leaf Values~>

~$~<PTG Patterns for Leaf Values~>~{
Id:             [PtgOutId $ int]
AsIs:           $ string
Numb:           $ int   
CString:        [CPtgOutstr $ string]
CChar:          [CPtgOutchar $ int]
PString:        [PPtgOutstr $ string]
~}

~$~<Macros defining more Leaf Functions~>~{
#define PTGCStringId(id) PTGCString(StringTable(id))
#define PTGPStringId(id) PTGPString(StringTable(id))
~}

~$~<Interface of Leaf Value Functions~>~{
void CPtgOutstr ELI_ARG((PTG_OUTPUT_FILE fs, CONST char *s));
void CPtgOutchar ELI_ARG((PTG_OUTPUT_FILE fs, int c));
void PPtgOutstr ELI_ARG((PTG_OUTPUT_FILE fs, CONST char *s));
void PtgOutId ELI_ARG((PTG_OUTPUT_FILE fs, int c));
~}

This macro is used to process a C Character. The code is inserted in
two C-functions: @code{CPtgOutstr} and @code{CPtgOutchar}.

~$~<OutputCChar~>~M~{
        if (c >= '\177') 
        {
                (void)sprintf(buffer, "\\%03o", c);
                PTG_OUTPUT_STRING(fs, buffer);
        }
        else if (c == '\\') 
                PTG_OUTPUT_STRING(fs, "\\\\");
        else if (c == '"') 
                PTG_OUTPUT_STRING(fs, "\\\"");
        else if (c >= ' ') 
                PTG_OUTPUT_CHAR(fs, c);
        else switch (c) 
        {
                case '\n': PTG_OUTPUT_STRING(fs, "\\n"); break;
                case '\t': PTG_OUTPUT_STRING(fs, "\\t"); break;
                case '\b': PTG_OUTPUT_STRING(fs, "\\b"); break;
                case '\r': PTG_OUTPUT_STRING(fs, "\\r"); break;
                case '\f': PTG_OUTPUT_STRING(fs, "\\f"); break;
                default:   sprintf(buffer, "\\%03o", c); 
                           PTG_OUTPUT_STRING(fs, buffer); 
        }
~}

~$~<Implementation of Leaf Value Functions~>~{
#define SQ      '\''
#define DQ      '\"'

#ifdef PROTO_OK
void CPtgOutstr(PTG_OUTPUT_FILE fs, const char *s)
#else
void CPtgOutstr(fs, s) 
        PTG_OUTPUT_FILE fs; 
        char *s;
#endif
{
        char buffer[5];
        int c;

        PTG_OUTPUT_CHAR(fs, DQ);

        while ((c = (unsigned int)(*s++) & 0377)) /*XXX*/
        {
~<OutputCChar~>
        }

        PTG_OUTPUT_CHAR(fs, DQ);
}

#ifdef PROTO_OK
void CPtgOutchar (PTG_OUTPUT_FILE fs, int ch)
#else
void CPtgOutchar(fs, ch) 
        PTG_OUTPUT_FILE fs; 
        int ch;
#endif
{
        char buffer[5];
        int c;

        PTG_OUTPUT_CHAR(fs, SQ);

        if ((c = (unsigned int)(ch) & 0377)) /*XXX*/
        {
~<OutputCChar~>
        }

        PTG_OUTPUT_CHAR(fs, SQ);
}


#ifdef PROTO_OK
void PPtgOutstr(PTG_OUTPUT_FILE fs, const char *s)
#else
void PPtgOutstr(fs, s) 
        PTG_OUTPUT_FILE fs; 
        char *s;
#endif
{
        int c;

        PTG_OUTPUT_CHAR(fs, SQ);

        while ((c = (unsigned int)(*s++) & 0177)) { /*XXX*/
                if (c == '\'') 
                        PTG_OUTPUT_STRING(fs, "''");
                else    PTG_OUTPUT_CHAR(fs, c);
        }

        PTG_OUTPUT_CHAR(fs, SQ);

}

#ifdef PROTO_OK
void PtgOutId (PTG_OUTPUT_FILE fs, int id)
#else
void PtgOutId (fs, id) 
        PTG_OUTPUT_FILE fs; 
        int id;
#endif
{
        PTG_OUTPUT_STRING(fs, StringTable(id));
}

~}

~A~<Often Used PTG-Patterns~>

~$~<Often Used Ptg Patterns~>~{
Seq:            $ $
CommaSeq:       $ { ", " } $
Eol:            $ "\n"
~}

~A~<Output Files~>

~O~<PtgCommon.ptg~>~{
~<PTG Patterns for Leaf Values~>
~<Often Used Ptg Patterns~>
~}

~O~<PtgCommon.h~>~{~-
#ifndef PTGCOMMON_H
#define PTGCOMMON_H

#include "eliproto.h"
#include "ptg_gen.h"
#include "csm.h"

~<Interface of Leaf Value Functions~>
~<Macros defining more Leaf Functions~>

#endif
~}

~O~<PtgCommon.c~>~{~-
#include "PtgCommon.h"

~<Implementation of Leaf Value Functions~>
~}

~O~<PtgCommon.reqmod~>~{~-
$/eli/eliproto.h
~}

~O~<PtgCommon.specs~>~{~-
$/Adt/csm.specs
~}

~O~<PtgCommon.HEAD.phi~>~{~-
#include "PtgCommon.h"
~}




